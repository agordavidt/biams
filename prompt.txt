==== updated seeder roles and permission with cooperatives ====
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\LGA;
use App\Models\Department;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RolesAndPermissionsSeeder extends Seeder
{
    public function run(): void
    {
        // Clear cached permissions
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        // Fetch required LGA and Department
        $lga = LGA::where('code', 'MDK')->first();
        if (!$lga) {
            $this->command->error("Makurdi LGA not found. Run LgaSeeder first.");
            return;
        }

        $dept_agric = Department::where('abbreviation', 'MAFS')->first();
        if (!$dept_agric) {
            $this->command->error("Ministry of Agriculture (MAFS) not found. Run DepartmentAndAgencySeeder first.");
            return;
        }

        // ====================================================================
        // 1. Define All Permissions (Standard, Analytics, Support, Cooperative)
        // ====================================================================

        $permissions = [
            // Super Admin Permissions
            'manage_users', 'manage_roles', 'manage_lgas', 'manage_departments',
            'manage_agencies', 'system_settings', 'view_audit_logs', 'export_all_data',

            // Governor/State-level Permissions
            'view_governor_dashboard', 'view_state_analytics', 'manage_state_reports', 'manage_supplier_catalog',

            // LGA Admin Permissions
            'view_lga_dashboard', 'manage_lga_agents',

            // LGA-level Permissions
            'create_farmer_profile', 'edit_farmer_profile_own_lga', 'view_farmer_data_own_lga', 'manage_lga_manifests',

            // Enrollment Agent Permissions
            'enroll_farmers', 'verify_farmer_data', 'update_farmer_profiles',

            // Standard User Permissions
            'access_marketplace', 'apply_for_resource', 'view_own_submissions', 'manage_own_marketplace_listings',

            // Analytics Permissions
            'view_analytics', 'export_analytics',

            // Chat Support Permissions
            'view_support_chats', 'manage_support_chats', 'respond_to_support',

            // Cooperative Management Permissions (Integrated from CooperativeSeeder)
            // LGA Admin - Full CRUD within their LGA
            'manage_lga_cooperatives', 'create_cooperatives', 'edit_cooperatives',
            'delete_cooperatives', 'manage_cooperative_members',

            // State Admin - View/Export statewide
            'view_all_cooperatives', 'view_cooperative_details', 'export_cooperatives',

            // Governor - Overview and statistics
            'view_cooperative_overview',

            // Super Admin - Everything (already covered by syncRoles for Super Admin, but explicitly included here)
            'manage_all_cooperatives',
        ];

        // Create all permissions (FIXED: Removed 'description' column to resolve QueryException)
        foreach ($permissions as $permission) {
            Permission::firstOrCreate(['name' => $permission, 'guard_name' => 'web']);
        }

        // ====================================================================
        // 2. Define Roles
        // ====================================================================

        $superAdminRole = Role::firstOrCreate(['name' => 'Super Admin', 'guard_name' => 'web']);
        $governorRole   = Role::firstOrCreate(['name' => 'Governor', 'guard_name' => 'web']);
        $stateAdminRole = Role::firstOrCreate(['name' => 'State Admin', 'guard_name' => 'web']);
        $lgaAdminRole   = Role::firstOrCreate(['name' => 'LGA Admin', 'guard_name' => 'web']);
        $enrollmentAgentRole = Role::firstOrCreate(['name' => 'Enrollment Agent', 'guard_name' => 'web']);
        $userRole       = Role::firstOrCreate(['name' => 'User', 'guard_name' => 'web']);

        // ====================================================================
        // 3. Assign Permissions to Roles (Syncing for clarity)
        // ====================================================================

        // Super Admin gets EVERYTHING
        $superAdminRole->syncPermissions($permissions);

        // Governor: Oversight (view only)
        $governorPermissions = [
            'view_governor_dashboard', 'view_state_analytics', 'manage_state_reports', 'export_all_data',
            'view_analytics', 'export_analytics',
            'view_support_chats',
            // Cooperative Permissions
            'view_cooperative_overview', 'view_all_cooperatives',
        ];
        $governorRole->syncPermissions($governorPermissions);

        // State Admin: Management, Support, State-level Analytics/Reports
        $stateAdminPermissions = [
            'manage_users', 'manage_roles', 'manage_departments', 'manage_agencies',
            'manage_state_reports', 'manage_supplier_catalog', 'view_state_analytics',
            'view_analytics', 'export_analytics',
            'view_support_chats', 'manage_support_chats', 'respond_to_support',
            // Cooperative Permissions
            'view_all_cooperatives', 'view_cooperative_details', 'export_cooperatives',
        ];
        $stateAdminRole->syncPermissions($stateAdminPermissions);

        // LGA Admin: LGA-level management, Farmer Review, Support, LGA Cooperatives (Full CRUD)
        $lgaAdminPermissions = [
            'view_lga_dashboard', 'manage_lga_agents', 'create_farmer_profile',
            'edit_farmer_profile_own_lga', 'view_farmer_data_own_lga', 'manage_lga_manifests',
            'view_analytics', 'export_analytics',
            'view_support_chats', 'respond_to_support',
            // Cooperative Permissions
            'manage_lga_cooperatives', 'create_cooperatives', 'edit_cooperatives',
            'delete_cooperatives', 'manage_cooperative_members', 'view_cooperative_details',
            'export_cooperatives',
        ];
        $lgaAdminRole->syncPermissions($lgaAdminPermissions);

        // Enrollment Agent: Enrollment tasks, local data view, basic support
        $enrollmentAgentPermissions = [
            'enroll_farmers', 'verify_farmer_data', 'update_farmer_profiles', 'view_farmer_data_own_lga',
            'view_analytics',
            'view_support_chats', 'respond_to_support',
        ];
        $enrollmentAgentRole->syncPermissions($enrollmentAgentPermissions);

        // Standard User: Farmer-level access
        $userRole->syncPermissions([
            'access_marketplace', 'apply_for_resource', 'view_own_submissions', 'manage_own_marketplace_listings',
        ]);

        // ====================================================================
        // 4. Create Initial Users
        // ====================================================================

        User::firstOrCreate(['email' => 'superadmin@benue.gov.ng'], [
            'name' => 'System Super Administrator',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
        ])->syncRoles([$superAdminRole]);

        User::firstOrCreate(['email' => 'governor@benue.gov.ng'], [
            'name' => 'Executive Governor',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
        ])->syncRoles([$governorRole]);

        User::firstOrCreate(['email' => 'stateadmin@benue.gov.ng'], [
            'name' => 'State Administrator (Agric)',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $dept_agric->id,
            'administrative_type' => Department::class,
        ])->syncRoles([$stateAdminRole]);

        User::firstOrCreate(['email' => 'lgaadmin@makurdi.gov.ng'], [
            'name' => 'Makurdi LGA Administrator',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id,
            'administrative_type' => LGA::class,
        ])->syncRoles([$lgaAdminRole]);

        User::firstOrCreate(['email' => 'agent@makurdi.gov.ng'], [
            'name' => 'Test Enrollment Agent',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id,
            'administrative_type' => LGA::class,
        ])->syncRoles([$enrollmentAgentRole]);

        // Note: The 'farmer@test.com' user is commented out, maintaining original functionality.

        $this->command->info('Roles, permissions (including cooperative), and initial test users seeded successfully!');
    }
}



==== coorperative model ===
class Cooperative extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'registration_number',
        'name',
        'contact_person',
        'phone',
        'email',
        'total_member_count',
        'total_land_size',
        'primary_activities',
        'lga_id',
        'registered_by',
    ];

    protected $casts = [
        'primary_activities' => 'array',
        'total_land_size' => 'decimal:2',
    ];

    // ==================== Relationships ====================

    /**
     * The primary LGA this cooperative is based in.
     */
    public function lga(): BelongsTo
    {
        return $this->belongsTo(LGA::class);
    }

    /**
     * The farmers who have this cooperative set as their primary cooperative (one-to-many).
     */
    public function primaryFarmers(): HasMany
    {
        return $this->hasMany(Farmer::class, 'cooperative_id');
    }

    /**
     * All farmers who are members of this cooperative (many-to-many).
     */
    public function members(): BelongsToMany
    {
        return $this->belongsToMany(Farmer::class, 'cooperative_farmer')
            ->withPivot([
                'membership_number',
                'joined_date',
                'exit_date',
                'membership_status',
                'position',
                'notes'
            ])
            ->withTimestamps();
    }
}


==== users model =====
<?php


namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles; 
use App\Models\Market\MarketplaceListing;
use App\Models\Market\MarketplaceSubscription;
use Illuminate\Contracts\Auth\MustVerifyEmail;


class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles; //  Use Spatie Trait

    protected $fillable = [
        'name',
        'email',
        'phone_number',
        'password',
        'status',
        'administrative_id',
        'administrative_type',
        // Add all other columns here
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the owning administrative unit (LGA, Department, or Agency).
     */
    public function administrativeUnit()
    {
        // Define the polymorphic relationship for scoping the user
        return $this->morphTo('administrative');
    }
    
   public function scopeForAdministrativeUnit($query, $type, $id)
    {
        return $query->where('administrative_type', $type)
                    ->where('administrative_id', $id);
    }

    public function scopeForLGA($query, $lgaId)
    {
        return $query->forAdministrativeUnit(LGA::class, $lgaId);
    }

    // ====================Chat  Relationships ====================
    // Add a reverse relationship to the Farmer profile.
    public function farmerProfile()
    {
        // A User can only have one Farmer profile associated with it
        return $this->hasOne(Farmer::class, 'user_id');
    }

    public function chats()
    {
        return $this->hasMany(Chat::class, 'assigned_admin_id');
    }

    // ==================== Marketplace Relationships ====================
    
    /**
     * Get all marketplace listings created by this user.
     */
    public function marketplaceListings()
    {
        return $this->hasMany(MarketplaceListing::class, 'user_id');
    }

    /**
     * Get active marketplace listings.
     */
    public function activeMarketplaceListings()
    {
        return $this->marketplaceListings()
            ->where('status', 'active')
            ->where(function($query) {
                $query->whereNull('expires_at')
                      ->orWhere('expires_at', '>', now());
            });
    }

    /**
     * Get all marketplace subscriptions.
     */
    public function marketplaceSubscriptions()
    {
        return $this->hasMany(MarketplaceSubscription::class, 'user_id');
    }

    /**
     * Get the current active marketplace subscription.
     */
    public function activeMarketplaceSubscription()
    {
        return $this->hasOne(MarketplaceSubscription::class, 'user_id')
            ->where('status', 'paid')
            ->where('end_date', '>', now())
            ->latest('end_date');
    }

    /**
     * Check if user has an active marketplace subscription.
     */
    public function hasActiveMarketplaceSubscription(): bool
    {
        return $this->marketplaceSubscriptions()
            ->where('status', 'paid')
            ->where('end_date', '>', now())
            ->exists();
    }

    /**
     * Get marketplace subscription expiry date.
     */
    public function getMarketplaceSubscriptionExpiryAttribute()
    {
        $subscription = $this->activeMarketplaceSubscription;
        return $subscription?->end_date;
    }

    /**
     * Check if marketplace subscription is expiring soon (within 30 days).
     */
    public function isMarketplaceSubscriptionExpiringSoon(): bool
    {
        $subscription = $this->activeMarketplaceSubscription;
        
        if (!$subscription) {
            return false;
        }

        return $subscription->end_date->diffInDays(now()) <= 30;
    }

    /**
     * Get total marketplace inquiries received.
     */
    public function getTotalMarketplaceInquiriesAttribute()
    {
        return $this->marketplaceListings()->sum('inquiry_count');
    }

    /**
     * Get total marketplace views received.
     */
    public function getTotalMarketplaceViewsAttribute()
    {
        return $this->marketplaceListings()->sum('view_count');
    }


    
}