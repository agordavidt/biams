---controller
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\ResourceApplication;
use App\Notifications\ResourceStatusUpdated;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Notification;

class ResourceApplicationController extends Controller
{
    public function index(Request $request)
    {
        $applications = ResourceApplication::query()
            ->with(['user', 'resource'])
            ->when($request->status, fn($q, $status) => $q->where('status', $status))
            ->when($request->search, function($q, $search) {
                $q->whereHas('user', fn($q) => $q->where('name', 'like', "%$search%")
                    ->orWhere('email', 'like', "%$search%"))
                ->orWhereHas('resource', fn($q) => $q->where('name', 'like', "%$search%"));
            })
            ->latest()
            ->paginate(15);

        return view('admin.resources.applications.index', compact('applications'));
    }

    public function show(ResourceApplication $application)
    {
        $application->load(['user', 'resource']);
        $statusOptions = ResourceApplication::getStatusOptions();
        
        return view('admin.resources.applications.show', [
            'application' => $application,
            'statusOptions' => $statusOptions
        ]);
    }

    public function updateStatus(Request $request, ResourceApplication $application)
    {
        $validated = $request->validate([
            'status' => 'required|in:' . implode(',', ResourceApplication::getStatusOptions()),
            'notes' => 'nullable|string|max:500'
        ]);

        if (!$application->canTransitionTo($validated['status'])) {
            return back()
                ->with('error', 'Invalid status transition')
                ->withInput();
        }

        try {
            $application->update(['status' => $validated['status']]);
            
            // Notify user of status change
            try {
                $application->user->notify(
                    new ResourceStatusUpdated($application, $validated['notes'] ?? null)
                );
            } catch (\Exception $e) {
                \Log::error('Notification failed: ' . $e->getMessage(), [
                    'user_id' => $application->user->id,
                    'notification' => ResourceStatusUpdated::class,
                ]);
            }

            return back()->with('success', 'Application status updated');
            
        } catch (\Exception $e) {
            return back()
                ->with('error', 'Failed to update status: ' . $e->getMessage())
                ->withInput();
        }
    }

    public function bulkUpdate(Request $request)
    {
        $validated = $request->validate([
            'applications' => 'required|array',
            'applications.*' => 'exists:resource_applications,id',
            'status' => 'required|in:' . implode(',', ResourceApplication::getStatusOptions()),
            'notes' => 'nullable|string|max:500'
        ]);

        $updatedCount = 0;
        $applications = ResourceApplication::whereIn('id', $validated['applications'])->get();

        foreach ($applications as $application) {
            if ($application->canTransitionTo($validated['status'])) {
                $application->update(['status' => $validated['status']]);
                $application->user->notify(
                    new ResourceStatusUpdated($application, $validated['notes'] ?? null)
                );
                $updatedCount++;
            }
        }

        return back()->with('success', "Updated $updatedCount applications");
    }

    public function export(Request $request)
    {
        $applications = ResourceApplication::query()
            ->with(['user', 'resource'])
            ->when($request->status, fn($q, $status) => $q->where('status', $status))
            ->when($request->date_from, fn($q, $date) => $q->whereDate('created_at', '>=', $date))
            ->when($request->date_to, fn($q, $date) => $q->whereDate('created_at', '<=', $date))
            ->get();

        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => 'attachment; filename="resource-applications-' . date('Y-m-d') . '.csv"',
        ];

        $callback = function() use ($applications) {
            $file = fopen('php://output', 'w');
            
            // Headers
            fputcsv($file, [
                'ID', 'User', 'Email', 'Resource', 
                'Status', 'Payment Status', 'Applied At', 'Last Updated'
            ]);

            // Data
            foreach ($applications as $app) {
                fputcsv($file, [
                    $app->id,
                    $app->user->name,
                    $app->user->email,
                    $app->resource->name,
                    ucfirst($app->status),
                    $app->payment_status ? ucfirst($app->payment_status) : 'N/A',
                    $app->created_at->format('Y-m-d H:i'),
                    $app->updated_at->format('Y-m-d H:i')
                ]);
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }
}



---Models
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class ResourceApplication extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id', 'resource_id', 'form_data', 'payment_reference',
        'status', 'payment_status'
    ];

    protected $casts = [
        'form_data' => 'array',
    ];

    // Status Constants
    const STATUS_PENDING = 'pending';
    const STATUS_REVIEWING = 'reviewing';
    const STATUS_APPROVED = 'approved';
    const STATUS_REJECTED = 'rejected';
    const STATUS_DELIVERED = 'delivered';

    const PAYMENT_STATUS_PENDING = 'pending';
    const PAYMENT_STATUS_PAID = 'paid';
    const PAYMENT_STATUS_VERIFIED = 'verified';
    const PAYMENT_STATUS_FAILED = 'failed';

    // Relationships
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function resource(): BelongsTo
    {
        return $this->belongsTo(Resource::class);
    }

    // Status Methods
    public static function getStatusOptions(): array
    {
        return [
            self::STATUS_PENDING => 'Pending',
            self::STATUS_REVIEWING => 'Reviewing',
            self::STATUS_APPROVED => 'Approved',
            self::STATUS_REJECTED => 'Rejected',
            self::STATUS_DELIVERED => 'Delivered',
        ];
    }

    public static function getPaymentStatusOptions(): array
    {
        return [
            self::PAYMENT_STATUS_PENDING => 'Pending',
            self::PAYMENT_STATUS_PAID => 'Paid',
            self::PAYMENT_STATUS_VERIFIED => 'Verified',
            self::PAYMENT_STATUS_FAILED => 'Failed',
        ];
    }

    public function canTransitionTo(string $newStatus): bool
    {
        $validTransitions = [
            self::STATUS_PENDING => [self::STATUS_REVIEWING, self::STATUS_REJECTED],
            self::STATUS_REVIEWING => [self::STATUS_APPROVED, self::STATUS_REJECTED],
            self::STATUS_APPROVED => [self::STATUS_DELIVERED],
            self::STATUS_REJECTED => [],
            self::STATUS_DELIVERED => [],
        ];

        return in_array($newStatus, $validTransitions[$this->status] ?? []);
    }

    public function canBeEdited(): bool
    {
        // Applications can be edited if they're not in final states
        return in_array($this->status, [
            self::STATUS_PENDING,
            self::STATUS_REVIEWING,
            self::STATUS_APPROVED
        ]);
    }

    public function updateStatus(string $newStatus): bool
    {
        if (!$this->canTransitionTo($newStatus)) {
            return false;
        }

        return $this->update(['status' => $newStatus]);
    }

    public function requiresPayment(): bool
    {
        return $this->resource->requires_payment;
    }

    public function getStatusLabel(): string
    {
        return self::getStatusOptions()[$this->status] ?? $this->status;
    }

    public function getPaymentStatusLabel(): string
    {
        return self::getPaymentStatusOptions()[$this->payment_status] ?? $this->payment_status;
    }
}


-- views

@extends('layouts.admin')

@section('content')
    <!-- Page Header -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h4>Application Details</h4>
                <a href="{{ route('admin.applications.index') }}" class="btn btn-secondary">
                    <i class="ri-arrow-left-line me-1"></i> Back
                </a>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <!-- User & Resource Info -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <h5 class="border-bottom pb-2 mb-3">User Information</h5>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <tbody>
                                <tr><th width="150">Name</th><td>{{ $application->user->name }}</td></tr>
                                <tr><th>Email</th><td>{{ $application->user->email }}</td></tr>
                                <tr><th>Submitted</th><td>{{ $application->created_at->format('M d, Y H:i') }}</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <h5 class="border-bottom pb-2 mb-3">Resource Information</h5>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <tbody>
                                <tr><th width="150">Name</th><td>{{ $application->resource->name }}</td></tr>
                                <tr><th>Type</th><td>{{ ucfirst($application->resource->target_practice) }}</td></tr>
                                @if($application->resource->requires_payment)
                                <tr>
                                    <th>Payment Status</th>
                                    <td>
                                        <span class="badge bg-{{ $application->payment_status === 'verified' ? 'success' : ($application->payment_status === 'failed' ? 'danger' : ($application->payment_status === 'paid' ? 'primary' : 'warning')) }}">
                                            {{ $application->getPaymentStatusLabel() }}
                                        </span>
                                    </td>
                                </tr>                                            
                                @endif
                                <tr><th>Status</th>
                                    <td>
                                        <span class="badge bg-{{ $application->status === 'approved' ? 'success' : ($application->status === 'rejected' ? 'danger' : ($application->status === 'delivered' ? 'info' : 'warning')) }}">
                                            {{ $application->getStatusLabel() }}
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Application Details -->
            <div class="mb-4">
                <h5 class="border-bottom pb-2 mb-3">Application Details</h5>
                
                @foreach($application->form_data as $key => $value)
                    <div class="mb-4">
                        <h6 class="text-muted mb-2">{{ ucfirst(str_replace('_', ' ', $key)) }}</h6>
                        
                        @if(is_string($value) && \Illuminate\Support\Str::startsWith($value, 'resource_applications/'))
                            @php 
                                $extension = pathinfo($value, PATHINFO_EXTENSION);
                                $isImage = in_array(strtolower($extension), ['jpg', 'jpeg', 'png', 'gif', 'webp']);
                                $isPdf = strtolower($extension) === 'pdf';
                                $fileUrl = asset('storage/' . $value);
                                $fileName = basename($value);
                            @endphp
                            
                            <div class="border p-3 rounded bg-light">
                                <!-- File name -->
                                <p class="mb-2">
                                    <i class="ri-file-{{ $isImage ? 'image' : ($isPdf ? 'pdf' : 'text') }}-line me-1"></i>
                                    <strong>{{ $fileName }}</strong>
                                </p>
                                
                                <!-- File preview -->
                                @if($isImage)
                                    <!-- Direct image display -->
                                    <div class="mb-3 text-center">
                                        <img src="{{ $fileUrl }}" alt="{{ $fileName }}" 
                                            class="img-fluid border rounded" style="max-height: 400px;">
                                    </div>
                                @elseif($isPdf)
                                    <!-- PDF embedded viewer -->
                                    <div class="mb-3">
                                        <iframe src="{{ $fileUrl }}" class="w-100 border rounded" 
                                            style="height: 500px;" title="{{ $fileName }}"></iframe>
                                    </div>
                                @else
                                    <!-- File icon for non-previewable files -->
                                    <div class="mb-3 text-center">
                                        <i class="ri-file-line display-4 text-muted"></i>
                                        <p class="text-muted">Preview not available</p>
                                    </div>
                                @endif
                                
                                <!-- File actions -->
                                <div class="text-end">
                                    <a href="{{ $fileUrl }}" class="btn btn-sm btn-primary" download="{{ $fileName }}">
                                        <i class="ri-download-line me-1"></i> Download
                                    </a>
                                    <a href="{{ $fileUrl }}" class="btn btn-sm btn-info" target="_blank">
                                        <i class="ri-external-link-line me-1"></i> Open in New Tab
                                    </a>
                                </div>
                            </div>
                        @elseif(is_array($value))
                            <p>{{ implode(', ', $value) }}</p>
                        @else
                            <p>{{ $value ?? 'N/A' }}</p>
                        @endif
                    </div>
                @endforeach
            </div>

            <!-- Status Update Form -->
            @if($application->canBeEdited())
                <div class="border rounded p-3 bg-light">
                    <h5 class="mb-3">Update Status</h5>
                    <form action="{{ route('admin.applications.update-status', $application) }}" method="POST">
                        @csrf
                        @method('PUT')
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Status</label>
                                <select name="status" class="form-select">
                                    @foreach(\App\Models\ResourceApplication::getStatusOptions() as $value => $label)
                                        @if($application->canTransitionTo($value))
                                            <option value="{{ $value }}">{{ $label }}</option>
                                        @endif
                                    @endforeach
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Notes (Optional)</label>
                                <textarea name="notes" rows="3" class="form-control"
                                    placeholder="Add notes for the applicant..."></textarea>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="ri-check-line me-1"></i> Update Status
                        </button>
                    </form>
                </div>
            @endif
        </div>
    </div>
@endsection



--- migration
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('resource_applications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('resource_id')->constrained()->onDelete('cascade');
            $table->json('form_data');
            $table->string('payment_reference')->nullable();
            $table->enum('status', ['pending', 'reviewing', 'approved', 'rejected', 'delivered'])->default('pending');
            $table->enum('payment_status', ['pending', 'paid', 'verified', 'failed'])->nullable()->default('pending');
            $table->timestamps();
            $table->unique(['user_id', 'resource_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('resource_applications');
    }
};
