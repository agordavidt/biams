-- Controllers
<?php

namespace App\Http\Controllers\SuperAdmin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use App\Models\Department;
use App\Models\Agency;
use App\Models\LGA;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class ManagementController extends Controller
{
    protected $globalRoles = ['Super Admin', 'Governor'];
    protected $unitRoleMap = [
        'LGA Admin' => ['LGA'],
        'Enrollment Agent' => ['LGA'],
        'State Admin' => ['Department', 'Agency'],
    ];

    protected function getUnitRoleIds()
    {
        $unitRoleNames = array_keys($this->unitRoleMap);
        return Role::whereIn('name', $unitRoleNames)->pluck('id')->map(fn($id) => (string)$id)->toArray();
    }
    
    public function index()
    {
        return view('super_admin.management.index');
    }

    public function users()
    {
        if (!Auth::user()->can('manage_users')) {
            abort(403, 'Unauthorized action.');
        }

        $users = User::with(['roles', 'administrativeUnit'])->get();
        return view('super_admin.management.users.index', compact('users'));
    }

    public function createUser()
    {
        if (!Auth::user()->can('manage_users')) {
            abort(403, 'Unauthorized action.');
        }

        $roles = Role::pluck('name', 'id');
        $unitRoles = Role::whereNotIn('name', $this->globalRoles)->pluck('name', 'id');
        $departments = Department::all();
        $agencies = Agency::all();
        $lgas = LGA::all();

        return view('super_admin.management.users.create', compact('roles', 'unitRoles', 'departments', 'agencies', 'lgas'));
    }

    public function storeUser(Request $request)
    {
        if (!Auth::user()->can('manage_users')) {
            abort(403, 'Unauthorized action.');
        }

        // Log incoming request for debugging
        Log::info('Store User Request', [
            'role_id' => $request->input('role_id'),
            'administrative_type' => $request->input('administrative_type'),
            'administrative_id' => $request->input('administrative_id'),
        ]);

        // 1. Define Base Rules
        $rules = [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email',
            'password' => 'required|string|min:8|confirmed',
            'role_id' => ['required', 'exists:roles,id'],
        ];

        $messages = [
            'administrative_type.required' => 'This role requires an administrative unit type to be selected.',
            'administrative_id.required' => 'Please select a specific administrative unit.',
            'role_id.required' => 'Please select a role for this user.',
        ];

        // 2. Get the role to check if it requires administrative unit
        $role = Role::find($request->input('role_id'));
        
        // 3. Add conditional rules if role requires unit
        if ($role && !in_array($role->name, $this->globalRoles)) {
            $rules['administrative_type'] = ['required', 'string', Rule::in(['Department', 'Agency', 'LGA'])];
            $rules['administrative_id'] = ['required', 'integer', 'min:1'];
        }

        // 4. Run Validation
        $validator = Validator::make($request->all(), $rules, $messages);

        // 5. Custom validation in after callback
        $validator->after(function ($validator) use ($request, $role) { 
            if ($this->shouldValidateUnitFields($role)) {
                $this->validateAdministrativeUnitExistence($validator, $request); 
                $this->validateRoleUnitCompatibility($validator, $request, $role); 
            }
        });

        // 6. Validate and get data
        $data = $validator->validate();

        // 7. Prepare administrative unit data
        $administrativeType = null;
        $administrativeId = null;
        
        // KEY FIX: Check if role requires unit and data is provided
        if ($role && !in_array($role->name, $this->globalRoles)) {
            // For unit-based roles, these fields are required by validation
            $shortType = $data['administrative_type']; // e.g., "Department", "Agency", "LGA"
            $administrativeType = "App\\Models\\{$shortType}";
            $administrativeId = $data['administrative_id'];
            
            // Additional safety check
            if (!$administrativeId || $administrativeId < 1) {
                return back()->withErrors([
                    'administrative_id' => 'A valid administrative unit must be selected for this role.'
                ])->withInput();
            }
        }
        
        // 8. Create User with explicit field assignment
        $user = User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
            'status' => 'onboarded',
            'administrative_type' => $administrativeType,
            'administrative_id' => $administrativeId,
        ]);

        // Log what was saved
        Log::info('User Created', [
            'user_id' => $user->id,
            'administrative_type' => $user->administrative_type,
            'administrative_id' => $user->administrative_id,
        ]);

        // 9. Assign Role
        $user->assignRole($role);

        return redirect()
            ->route('super_admin.management.users.index')
            ->with('success', 'User created successfully and is now active.');
    }

    public function editUser(User $user)
    {
        if (!Auth::user()->can('manage_users')) {
            abort(403, 'Unauthorized action.');
        }

        $roles = Role::pluck('name', 'id');
        $unitRoles = Role::whereNotIn('name', $this->globalRoles)->pluck('name', 'id');
        $departments = Department::all();
        $agencies = Agency::all();
        $lgas = LGA::all();

        return view('super_admin.management.users.edit', compact('user', 'roles', 'unitRoles', 'departments', 'agencies', 'lgas'));
    }

    public function updateUser(Request $request, User $user)
    {
        if (!Auth::user()->can('manage_users')) {
            abort(403, 'Unauthorized action.');
        }

        // Log incoming request
        Log::info('Update User Request', [
            'user_id' => $user->id,
            'role_id' => $request->input('role_id'),
            'administrative_type' => $request->input('administrative_type'),
            'administrative_id' => $request->input('administrative_id'),
        ]);
        
        // 1. Define Base Rules
        $rules = [
            'name' => 'required|string|max:255',
            'email' => ['required', 'string', 'email', 'max:255', Rule::unique('users', 'email')->ignore($user->id)],
            'password' => 'nullable|string|min:8|confirmed',
            'role_id' => ['required', 'exists:roles,id'],
            'status' => ['required', Rule::in(['onboarded', 'pending', 'rejected'])],
        ];
        
        $messages = [
            'administrative_type.required' => 'This role requires an administrative unit type to be selected.',
            'administrative_id.required' => 'Please select a specific administrative unit.',
            'role_id.required' => 'Please select a role for this user.',
        ];

        // 2. Get the role
        $role = Role::find($request->input('role_id'));
        
        // 3. Conditional Unit Rules
        if ($role && !in_array($role->name, $this->globalRoles)) {
            $rules['administrative_type'] = ['required', 'string', Rule::in(['Department', 'Agency', 'LGA'])];
            $rules['administrative_id'] = ['required', 'integer', 'min:1'];
        } else {
            // For global roles, make fields nullable
            $rules['administrative_type'] = 'nullable';
            $rules['administrative_id'] = 'nullable';
        }

        // 4. Run Validation
        $validator = Validator::make($request->all(), $rules, $messages);

        // 5. Custom validation
        $validator->after(function ($validator) use ($request, $role) {
            if ($this->shouldValidateUnitFields($role) && $request->filled('administrative_type') && $request->filled('administrative_id')) {
                $this->validateAdministrativeUnitExistence($validator, $request);
                $this->validateRoleUnitCompatibility($validator, $request, $role);
            }
        });

        $data = $validator->validate();

        // 6. Update basic fields
        $user->name = $data['name'];
        $user->email = $data['email'];
        $user->status = $data['status'];
        
        if (!empty($data['password'])) {
            $user->password = Hash::make($data['password']);
        }

        // 7. Handle Administrative Unit
        if ($role && !in_array($role->name, $this->globalRoles)) {
            // Unit-based role - set administrative fields
            $shortType = $data['administrative_type'];
            $user->administrative_type = "App\\Models\\{$shortType}";
            $user->administrative_id = $data['administrative_id'];
        } else {
            // Global role - clear administrative fields
            $user->administrative_type = null;
            $user->administrative_id = null;
        }

        // Log what will be saved
        Log::info('User Update', [
            'user_id' => $user->id,
            'administrative_type' => $user->administrative_type,
            'administrative_id' => $user->administrative_id,
        ]);
        
        // 8. Sync Role and Save
        $user->syncRoles([$role]);
        $user->save();

        return redirect()
            ->route('super_admin.management.users.index')
            ->with('success', 'User updated successfully.');
    }

    public function destroyUser(User $user)
    {
        if (!Auth::user()->can('manage_users') || Auth::id() === $user->id) {
            abort(403, 'Unauthorized action.');
        }

        $user->delete();
        return redirect()->route('super_admin.management.users.index')->with('success', 'User deleted successfully.');
    }

    protected function shouldValidateUnitFields(Role $role = null)
    {
        return $role && !in_array($role->name, $this->globalRoles);
    }
    
    protected function validateAdministrativeUnitExistence($validator, $request): void
    {
        $type = $request->input('administrative_type');
        $id = $request->input('administrative_id');
        
        if (!$type || !$id) {
            return;
        }

        $modelClass = "App\\Models\\{$type}";
        
        if (!class_exists($modelClass)) {
            $validator->errors()->add('administrative_type', 'Invalid administrative type selected.');
            return;
        }
        
        $exists = $modelClass::where('id', $id)->exists();
        
        if (!$exists) {
            $validator->errors()->add('administrative_id', "The selected {$type} does not exist.");
        }
    }

    protected function validateRoleUnitCompatibility($validator, $request, Role $role): void
    {
        $type = $request->input('administrative_type');

        if (!$type) {
            return;
        }

        if (isset($this->unitRoleMap[$role->name])) {
            $allowedTypes = $this->unitRoleMap[$role->name];
            
            if (!in_array($type, $allowedTypes)) {
                $validator->errors()->add(
                    'administrative_type',
                    "The role '{$role->name}' can only be assigned to: " . 
                    implode(' or ', $allowedTypes) . '.'
                );
            }
        }
    }

    // Department, Agency, LGA management methods remain the same...
    public function departments()
    {
        if (!Auth::user()->can('manage_departments')) {
            abort(403, 'Unauthorized action.');
        }

        $departments = Department::withCount('users')->get();
        return view('super_admin.management.departments.index', compact('departments'));
    }

    public function storeDepartment(Request $request)
    {
        if (!Auth::user()->can('manage_departments')) {
            abort(403, 'Unauthorized action.');
        }

        $data = $request->validate([
            'name' => 'required|string|unique:departments,name|max:255',
            'abbreviation' => 'nullable|string|max:50',
        ]);

        Department::create($data);

        return response()->json(['success' => true, 'message' => 'Department created successfully.']);
    }

    public function updateDepartment(Request $request, Department $department)
    {
        if (!Auth::user()->can('manage_departments')) {
            abort(403, 'Unauthorized action.');
        }

        $data = $request->validate([
            'name' => ['required', 'string', 'max:255', Rule::unique('departments', 'name')->ignore($department->id)],
            'abbreviation' => 'nullable|string|max:50',
        ]);

        $department->update($data);

        return response()->json(['success' => true, 'message' => 'Department updated successfully.']);
    }

    public function destroyDepartment(Department $department)
    {
        if (!Auth::user()->can('manage_departments')) {
            abort(403, 'Unauthorized action.');
        }

        if ($department->users()->count() > 0) {
            return response()->json(['success' => false, 'message' => 'Cannot delete department with assigned users.'], 422);
        }

        $department->delete();
        return response()->json(['success' => true, 'message' => 'Department deleted successfully.']);
    }

    public function agencies()
    {
        if (!Auth::user()->can('manage_agencies')) {
            abort(403, 'Unauthorized action.');
        }

        $agencies = Agency::with('department')->withCount('users')->get();
        $departments = Department::all();
        return view('super_admin.management.agencies.index', compact('agencies', 'departments'));
    }

    public function storeAgency(Request $request)
    {
        if (!Auth::user()->can('manage_agencies')) {
            abort(403, 'Unauthorized action.');
        }

        $data = $request->validate([
            'name' => 'required|string|unique:agencies,name|max:255',
            'department_id' => 'required|exists:departments,id',
        ]);

        Agency::create($data);

        return response()->json(['success' => true, 'message' => 'Agency created successfully.']);
    }

    public function updateAgency(Request $request, Agency $agency)
    {
        if (!Auth::user()->can('manage_agencies')) {
            abort(403, 'Unauthorized action.');
        }

        $data = $request->validate([
            'name' => ['required', 'string', 'max:255', Rule::unique('agencies', 'name')->ignore($agency->id)],
            'department_id' => 'required|exists:departments,id',
        ]);

        $agency->update($data);

        return response()->json(['success' => true, 'message' => 'Agency updated successfully.']);
    }

    public function destroyAgency(Agency $agency)
    {
        if (!Auth::user()->can('manage_agencies')) {
            abort(403, 'Unauthorized action.');
        }

        if ($agency->users()->count() > 0) {
            return response()->json(['success' => false, 'message' => 'Cannot delete agency with assigned users.'], 422);
        }

        $agency->delete();
        return response()->json(['success' => true, 'message' => 'Agency deleted successfully.']);
    }

    public function lgas()
    {
        if (!Auth::user()->can('manage_lgas')) {
            abort(403, 'Unauthorized action.');
        }

        $lgas = LGA::withCount('users')->get();
        return view('super_admin.management.lgas.index', compact('lgas'));
    }
}


-- view_state_analytics
===create view
@extends('layouts.super_admin')
@section('content')
<div class="page-content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                    <h4 class="mb-sm-0">Create New User</h4>
                    <div class="page-title-right">                       
                        <a href="{{ route('super_admin.management.users.index') }}" class="btn btn-secondary">
                            <i class="ri-arrow-left-line align-middle me-1"></i> Back to Users
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <form method="POST" action="{{ route('super_admin.management.users.store') }}" id="createUserForm">
                            @csrf
                            <div class="row">
                                <div class="col-md-6">
                                    <h5 class="mb-3">Basic Information</h5>
                                    
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Full Name <span class="text-danger">*</span></label>
                                        <input type="text" name="name" id="name" class="form-control @error('name') is-invalid @enderror" 
                                               value="{{ old('name') }}" required>
                                        @error('name')
                                            <div class="invalid-feedback">{{ $message }}</div>
                                        @enderror
                                    </div>

                                    <div class="mb-3">
                                        <label for="email" class="form-label">Email Address <span class="text-danger">*</span></label>
                                        <input type="email" name="email" id="email" class="form-control @error('email') is-invalid @enderror" 
                                               value="{{ old('email') }}" required>
                                        @error('email')
                                            <div class="invalid-feedback">{{ $message }}</div>
                                        @enderror
                                    </div>

                                    <div class="mb-3">
                                        <label for="password" class="form-label">Password <span class="text-danger">*</span></label>
                                        <input type="password" name="password" id="password" class="form-control @error('password') is-invalid @enderror" required>
                                        @error('password')
                                            <div class="invalid-feedback">{{ $message }}</div>
                                        @enderror
                                    </div>

                                    <div class="mb-3">
                                        <label for="password_confirmation" class="form-label">Confirm Password <span class="text-danger">*</span></label>
                                        <input type="password" name="password_confirmation" id="password_confirmation" class="form-control" required>
                                    </div>                                    
                                </div>

                                <div class="col-md-6">
                                    <h5 class="mb-3">Role & Unit Assignment</h5>
                                    
                                    <div class="mb-3">
                                        <label for="role_id" class="form-label">Assign Role <span class="text-danger">*</span></label>
                                        <select name="role_id" id="role_id" class="form-control @error('role_id') is-invalid @enderror" required>
                                            <option value="">-- Select Role --</option>
                                            @foreach($roles as $id => $name)
                                                <option value="{{ $id }}" {{ old('role_id') == $id ? 'selected' : '' }}>{{ $name }}</option>
                                            @endforeach
                                        </select>
                                        @error('role_id')
                                            <div class="invalid-feedback">{{ $message }}</div>
                                        @enderror
                                    </div>

                                    <div id="administrative_unit_section" style="display: none;">
                                        <div class="alert alert-info">
                                            <i class="ri-information-line"></i> This role requires administrative unit assignment.
                                        </div>

                                        <div class="mb-3">
                                            <label for="administrative_type" class="form-label">Administrative Unit Type <span class="text-danger" id="type_required">*</span></label>
                                            <select id="administrative_type" name="administrative_type" class="form-control @error('administrative_type') is-invalid @enderror">
                                                <option value="">-- Select Type --</option>
                                                <option value="Department" {{ old('administrative_type') == 'Department' ? 'selected' : '' }}>Department</option>
                                                <option value="Agency" {{ old('administrative_type') == 'Agency' ? 'selected' : '' }}>Agency</option>
                                                <option value="LGA" {{ old('administrative_type') == 'LGA' ? 'selected' : '' }}>LGA</option>
                                            </select>
                                            @error('administrative_type')
                                                <div class="invalid-feedback">{{ $message }}</div>
                                            @enderror
                                        </div>

                                        <div class="mb-3">
                                            <label for="administrative_id" class="form-label">Administrative Unit <span class="text-danger" id="unit_required">*</span></label>
                                            <select id="administrative_id" name="administrative_id" class="form-control @error('administrative_id') is-invalid @enderror">
                                                <option value="">-- Select Unit --</option>
                                            </select>
                                            @error('administrative_id')
                                                <div class="invalid-feedback">{{ $message }}</div>
                                            @enderror
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="ri-save-line align-middle me-1"></i> Create User
                                </button>
                                <a href="{{ route('super_admin.management.users.index') }}" class="btn btn-secondary">Cancel</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
    const departments = @json($departments);
    const agencies = @json($agencies);
    const lgas = @json($lgas);
    const unitRoleIds = Object.keys(@json($unitRoles)).map(id => String(id));

    const roleSelect = document.getElementById('role_id');
    const unitSection = document.getElementById('administrative_unit_section');
    const unitTypeSelect = document.getElementById('administrative_type');
    const unitIdSelect = document.getElementById('administrative_id');
    const form = document.getElementById('createUserForm');

    // Event Listeners
    roleSelect.addEventListener('change', toggleUnitSection);
    unitTypeSelect.addEventListener('change', updateUnits);
    
    // Add change listener to administrative_id to log selection
    unitIdSelect.addEventListener('change', function() {
        console.log('Administrative Unit Selected:', {
            value: unitIdSelect.value,
            text: unitIdSelect.options[unitIdSelect.selectedIndex]?.text,
            disabled: unitIdSelect.disabled
        });
    });
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        toggleUnitSection();
        if (unitTypeSelect.value) {
            updateUnits();
        }
    });

    // Add form submission validation with more logging
    form.addEventListener('submit', function(e) {
        console.log('=== FORM SUBMISSION TRIGGERED ===');
        
        const selectedRoleId = String(roleSelect.value);
        console.log('Selected Role ID:', selectedRoleId);
        console.log('Is Unit Role?', unitRoleIds.includes(selectedRoleId));
        
        if (unitRoleIds.includes(selectedRoleId)) {
            // For unit-based roles, ensure fields are filled
            console.log('Administrative Type Value:', unitTypeSelect.value);
            console.log('Administrative ID Value:', unitIdSelect.value);
            console.log('Administrative Type Disabled?', unitTypeSelect.disabled);
            console.log('Administrative ID Disabled?', unitIdSelect.disabled);
            
            if (!unitTypeSelect.value || !unitIdSelect.value) {
                e.preventDefault();
                console.error('❌ VALIDATION FAILED: Missing administrative fields');
                alert('Please select both Administrative Unit Type and Administrative Unit for this role.');
                return false;
            }
            
            // Log what we're about to submit
            console.log('✅ SUBMITTING FORM WITH:', {
                role_id: roleSelect.value,
                administrative_type: unitTypeSelect.value,
                administrative_id: unitIdSelect.value,
                administrative_id_text: unitIdSelect.options[unitIdSelect.selectedIndex]?.text
            });
        } else {
            // For global roles, ensure administrative fields are cleared/disabled
            console.log('✅ SUBMITTING FORM FOR GLOBAL ROLE (no administrative unit)');
        }
        
        console.log('=== FORM WILL NOW SUBMIT ===');
    });

    function toggleUnitSection() {
        const selectedRoleId = String(roleSelect.value);

        if (unitRoleIds.includes(selectedRoleId)) {
            // Show section and enable fields
            unitSection.style.display = 'block';
            unitTypeSelect.disabled = false;
            unitIdSelect.disabled = false;
            unitTypeSelect.required = true;
            unitIdSelect.required = true;
            
            // If there's an old value, restore it
            const oldType = '{{ old("administrative_type") }}';
            if (oldType && !unitTypeSelect.value) {
                unitTypeSelect.value = oldType;
                updateUnits();
            }
        } else {
            // Hide section and disable fields (disabled fields aren't submitted)
            unitSection.style.display = 'none';
            unitTypeSelect.disabled = true;
            unitIdSelect.disabled = true;
            unitTypeSelect.required = false;
            unitIdSelect.required = false;
            
            // Clear values when disabled
            unitTypeSelect.value = '';
            unitIdSelect.innerHTML = '<option value="">-- Select Unit --</option>';
        }
    }

    function updateUnits() {
        const type = unitTypeSelect.value;
        unitIdSelect.innerHTML = '<option value="">-- Select Unit --</option>';

        let units = [];
        if (type === 'Department') {
            units = departments;
        } else if (type === 'Agency') {
            units = agencies;
        } else if (type === 'LGA') {
            units = lgas;
        }
        
        units.forEach(unit => {
            const option = document.createElement('option');
            option.value = unit.id;
            option.textContent = unit.name;
            unitIdSelect.appendChild(option);
        });

        // Restore old value if exists
        const oldUnitId = '{{ old('administrative_id') }}'; 
        if (oldUnitId) {
            unitIdSelect.value = oldUnitId;
        }
        
        console.log(`Loaded ${units.length} units for type: ${type}`);
    }
</script>
@endpush