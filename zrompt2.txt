-- migrations
Schema::create('cooperatives', function (Blueprint $table) {
            $table->id();
            
            // Core Identity & Compliance
            $table->string('registration_number')->unique()->comment('Unique Government/Association ID');
            $table->string('name')->comment('Cooperative Name');
            
            // Contact Details
            $table->string('contact_person')->nullable()->comment('Name of the primary official');
            $table->string('phone')->nullable();
            $table->string('email')->nullable();
            
            // Scale & Activity
            $table->integer('total_member_count')->unsigned()->default(0)->comment('Number of members reported by the cooperative');
            $table->decimal('total_land_size', 15, 2)->nullable()->comment('Aggregate land managed by the cooperative (ha)');
            $table->json('primary_activities')->nullable()->comment('Input procurement, processing, marketing, etc. (Multi-Select)');
            
            // Metadata
            $table->foreignId('lga_id')->nullable()->constrained('lgas')->onDelete('set null')
                  ->comment('Primary LGA for the cooperative');
            $table->foreignId('registered_by')->constrained('users')->onDelete('restrict')
                  ->comment('The Enrollment Agent or Admin who registered the cooperative');

            $table->timestamps();
            $table->softDeletes();
            
            // Indexes
            $table->index('lga_id');
            $table->index('registration_number');




             Schema::create('farmers', function (Blueprint $table) {
            $table->id();
            
            // Core Identity & Authentication
            $table->string('nin')->unique()->comment('National Identification Number');
            $table->foreignId('user_id')->nullable()->constrained('users')->onDelete('cascade')
                  ->comment('Links to users table for authentication');
            
            // Personal Demographics
            $table->string('full_name');
            $table->string('phone_primary')->unique();
            $table->string('phone_secondary')->nullable();
            $table->string('email')->unique();
            $table->enum('gender', ['male', 'female', 'other']);
            $table->enum('marital_status', ['single', 'married', 'divorced', 'widowed']);
            $table->date('date_of_birth');
            
            // Location & Administrative Data
            $table->foreignId('lga_id')->constrained('lgas')->onDelete('restrict');
            $table->string('ward');
            $table->text('residential_address');
            
            // Geolocation for Residence
            $table->decimal('residence_latitude', 10, 8)->nullable();
            $table->decimal('residence_longitude', 11, 8)->nullable();
            
            // Socio-Economic Profile
            $table->enum('educational_level', [
                'none', 
                'primary', 
                'secondary', 
                'tertiary', 
                'vocational'
            ]);
            $table->integer('household_size')->unsigned()->default(1);
            $table->enum('primary_occupation', [
                'full_time_farmer',
                'part_time_farmer',
                'civil_servant',
                'trader',
                'artisan',
                'student',
                'other'
            ]);
            $table->string('other_occupation')->nullable();
            
            // Cooperative Linkage
            $table->foreignId('cooperative_id')->nullable()->constrained('cooperatives')->onDelete('set null');
            
            // Enrollment & Administrative Tracking
            $table->foreignId('enrolled_by')->constrained('users')->onDelete('restrict')
                  ->comment('Enrollment Officer who registered this farmer');
            $table->foreignId('approved_by')->nullable()->constrained('users')->onDelete('set null')
                  ->comment('LGA Admin who approved this enrollment');
            
            // Status & Workflow
            $table->enum('status', [
                'pending_lga_review',
                'pending_activation',
                'active',
                'suspended',
                'rejected'
            ])->default('pending_lga_review');
            $table->text('rejection_reason')->nullable();
            $table->timestamp('approved_at')->nullable();
            $table->timestamp('activated_at')->nullable();
            
            // System-Generated Credentials (Cleared after first login)
            $table->string('initial_password')->nullable()
                  ->comment('Temporary storage for initial password - cleared on first login');
            $table->boolean('password_changed')->default(false);
            
            // Metadata
            $table->json('additional_info')->nullable()
                  ->comment('Flexible field for future expansion');
            
            $table->timestamps();
            $table->softDeletes();
            
            // Indexes for Performance
            $table->index(['lga_id', 'status']);
            $table->index('enrolled_by');
            $table->index('approved_by');
            $table->index(['residence_latitude', 'residence_longitude']);
        });



                Schema::create('farm_lands', function (Blueprint $table) {
            $table->id(); // Farm ID (Primary Key)
            
            // Linkage
            $table->foreignId('farmer_id')->constrained('farmers')->onDelete('cascade')
                  ->comment('Links the farm back to the Farmer Profile');
            
            // Plot Details
            $table->string('name')->comment('E.g., "Home Plot," "River Field"');
            $table->enum('farm_type', ['crops', 'livestock', 'fisheries', 'orchards', 'forestry'])
                  ->comment('Used to dynamically load the next sub-form');
            $table->decimal('total_size_hectares', 10, 4)
                  ->comment('The registered size of this specific plot (ha)');
            $table->enum('ownership_status', ['owned', 'leased', 'shared', 'communal']);
            
            // Geospatial Data
            // Storing GeoJSON as a TEXT/JSON field for simplicity across various database systems.
            $table->longText('geolocation_geojson')->nullable()
                  ->comment('Actual farm boundaries (polygon) or center point (point) as GeoJSON string');
            
            $table->timestamps();
            $table->softDeletes();
            
            // Indexes
            $table->index('farmer_id');
            $table->index('farm_type');
        });
    }



    {
        Schema::create('crop_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->string('crop_type');
            $table->string('variety')->nullable();
            $table->decimal('expected_yield_kg', 10, 2)->nullable();
            $table->enum('farming_method', ['irrigation', 'rain_fed', 'organic', 'mixed']);
            
            $table->timestamps();
            
            $table->index('crop_type');
        });
    }



        Schema::create('livestock_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->string('animal_type');
            $table->integer('herd_flock_size')->unsigned();
            $table->enum('breeding_practice', ['open_grazing', 'ranching', 'intensive', 'semi_intensive']);
            
            $table->timestamps();
            
            $table->index('animal_type');
        });
    }

    Schema::create('fisheries_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->enum('fishing_type', ['aquaculture_pond', 'riverine', 'reservoir']);
            $table->string('species_raised');
            $table->decimal('pond_size_sqm', 10, 2)->nullable();
            $table->decimal('expected_harvest_kg', 10, 2)->nullable();
            
            $table->timestamps();
            
            $table->index('fishing_type');
        });


        Schema::create('orchard_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->string('tree_type');
            $table->integer('number_of_trees')->unsigned();
            $table->enum('maturity_stage', ['seedling', 'immature', 'producing']);
            
            $table->timestamps();
            
            $table->index('tree_type');
        });


        Schema::create('cooperative_farmer', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farmer_id')->constrained('farmers')->onDelete('cascade');
            $table->foreignId('cooperative_id')->constrained('cooperatives')->onDelete('cascade');
            $table->string('membership_number')->nullable();
            $table->date('joined_date')->nullable();
            $table->date('exit_date')->nullable();
            $table->enum('membership_status', ['active', 'inactive', 'pending'])->default('active');
            $table->string('position')->nullable();
            $table->text('notes')->nullable();
            $table->timestamps();
            $table->unique(['farmer_id', 'cooperative_id']);
            $table->index('membership_status');
        });


