-- models
<?php

namespace App\Models\Farmers;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;

class AbattoirOperator extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',       
        'facility_type',
        'facility_specs',
        'operational_capacity',
        'certifications',
        'status',
        'rejection_comments',
    ];

    protected $casts = [
        'certifications' => 'array',
    ];

    // Define relationship with User
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}





<?php

namespace App\Models\Farmers;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;


class AnimalFarmer extends Model
{
    use HasFactory;

   protected $fillable = [
    'user_id',
    'herd_size',
    'facility_type',
    'breeding_program',
    'farm_location',
    'livestock',
    'other_livestock',
    'status',
    'rejection_comments',
];


    // Define relationship with User
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    
}


<?php

namespace App\Models\Farmers;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;


class CropFarmer extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'farm_size',
        'farming_methods',
        'seasonal_pattern',
        'latitude',
        'longitude',
        'farm_location',
        'crop',
        'other_crop',
        'status',
        'rejection_comments',
    ];

    // Define relationship with User
    public function user()
    {
        return $this->belongsTo(User::class);
    }   
    
}




<?php

namespace App\Models\Farmers;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;

class Processor extends Model
{
    use HasFactory;

      protected $fillable = [
        'user_id',
        'processed_items',
        'processing_capacity',
        'equipment_type',
        'equipment_specs',
        'status',
        'rejection_comments',
    ];

    // Define relationship with User
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
}


<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Abattoir extends Model
{
    protected $fillable = [
        'name', 'registration_number', 'license_number', 'address', 'lga',
        'gps_latitude', 'gps_longitude', 'capacity', 'status', 'description',
    ];

    public function staff()
    {
        return $this->hasMany(AbattoirStaff::class);
    }

    public function slaughterOperations()
    {
        return $this->hasMany(SlaughterOperation::class);
    }
}

<?php


namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Profile extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'phone',
        'dob', 
        'gender', 
        'nin',
        'education', 
        'household_size', 
        'dependents', 
        'income_level', 
        'lga', 
        'address',
    ];

    // Relationship to User
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use App\Notifications\CustomVerifyEmail; // Import the custom verification notification

use App\Models\Farmers\AbattoirOperator;
use App\Models\Farmers\CropFarmer;
use App\Models\Farmers\AnimalFarmer;
use App\Models\Farmers\Processor;
use App\Models\Market\MarketplaceListing;
use App\Models\Market\MarketplaceCategory;
use App\Models\Market\MarketplaceMessage;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'status',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Send the email verification notification.
     *
     * @return void
     */
    public function sendEmailVerificationNotification()
    {
        $this->notify(new CustomVerifyEmail);
    }

    // Relationships
    public function profile()
    {
        return $this->hasOne(Profile::class);
    }

    public function cropFarmers()
    {
        return $this->hasMany(CropFarmer::class);
    }

    public function animalFarmers()
    {
        return $this->hasMany(AnimalFarmer::class);
    }

    public function abattoirOperators()
    {
        return $this->hasMany(AbattoirOperator::class);
    }

    public function processors()
    {
        return $this->hasMany(Processor::class);
    }

    // Marketplace Relationships
    public function marketplaceListings()
    {
        return $this->hasMany(MarketplaceListing::class);
    }

    public function sentMessages()
    {
        return $this->hasMany(MarketplaceMessage::class, 'sender_id');
    }

    public function receivedMessages()
    {
        return $this->hasMany(MarketplaceMessage::class, 'receiver_id');
    }
}





