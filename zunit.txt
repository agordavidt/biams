--Controllers

<?php

namespace App\Http\Controllers\LGAAdmin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Farmer;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\DB; 

class FarmerReviewController extends Controller
{
    /**
     * Display a listing of farmers pending review and those already reviewed in the admin's LGA.
     */
    public function index()
    {
        $lgaId = auth()->user()->administrative_id;
        
        // 1. Load farmers pending review (Paginated)
        $pendingFarmers = Farmer::forLGA($lgaId)
            ->pendingReview()
            ->with('enrolledBy')
            ->orderBy('created_at', 'asc')
            ->paginate(15, ['*'], 'pending_page');

        // 2. Load rejected/approved farmers for tracking (Paginated, only if needed for a large table, otherwise count is fine)
        $reviewedFarmers = Farmer::forLGA($lgaId)
            ->whereIn('status', ['rejected', 'pending_activation', 'active'])
            ->with('enrolledBy')
            ->orderBy('approved_at', 'desc')
            ->paginate(15, ['*'], 'reviewed_page');

        // 3. Calculate Counts for dashboard cards (The missing logic)
        $baseQuery = Farmer::forLGA($lgaId);

        $rejectedCount = (clone $baseQuery)->where('status', 'rejected')->count();
        $activeCount = (clone $baseQuery)->where('status', 'active')->count();

        // 4. Pass all data to the view
        return view('lga_admin.farmers.index', compact('pendingFarmers', 'reviewedFarmers', 'rejectedCount', 'activeCount'));
    }

    /**
     * Display the specified farmer profile for detailed review.
     */
    public function show(Farmer $farmer)
    {
        // Enforce boundary check: Admin can only review farmers in their LGA
        if ($farmer->lga_id !== auth()->user()->administrative_id) {
            abort(403, 'Unauthorized access to farmer outside your LGA.');
        }

        $farmer->load('enrolledBy', 'approvedBy', 'cooperative', 'farmLands.practiceDetails');

        return view('lga_admin.farmers.show', compact('farmer'));
    }

    /**
     * Approve the farmer enrollment.
     */
    public function approve(Farmer $farmer)
    {
        if ($farmer->lga_id !== auth()->user()->administrative_id || $farmer->status !== 'pending_lga_review') {
            return back()->with('error', 'Enrollment is not eligible for approval.');
        }
        
        $admin = auth()->user();

        if ($farmer->approve($admin)) {
            return back()->with('success', 'Farmer profile approved. Status changed to Pending Activation.');
        }

        return back()->with('error', 'Failed to approve profile.');
    }

    /**
     * Reject the farmer enrollment.
     */
    public function reject(Request $request, Farmer $farmer)
    {
        $request->validate(['rejection_reason' => ['required', 'string', 'min:10']]);

        if ($farmer->lga_id !== auth()->user()->administrative_id || $farmer->status !== 'pending_lga_review') {
            return back()->with('error', 'Enrollment is not eligible for rejection.');
        }
        
        $admin = auth()->user();
        
        if ($farmer->reject($admin, $request->rejection_reason)) {
            return back()->with('success', 'Farmer profile rejected. Enrollment Officer can now resubmit.');
        }

        return back()->with('error', 'Failed to reject profile.');
    }

    /**
     * Activate the farmer account: creates the User record and links it to the Farmer.
     */
    public function activate(Farmer $farmer)
    {
        if ($farmer->status !== 'pending_activation') {
            return back()->with('error', 'Profile must be Approved (Pending Activation) before final activation.');
        }

        try {
            DB::beginTransaction();

            // 1. Create the User Account
            $user = User::create([
                'name' => $farmer->full_name,
                'email' => $farmer->email,
                'phone_number' => $farmer->phone_primary,
                // Hashing the initial password for the User table
                'password' => Hash::make($farmer->initial_password), 
                'email_verified_at' => now(), 
                'status' => 'active', 
                'administrative_id' => $farmer->lga_id, 
                'administrative_type' => \App\Models\LGA::class, 
            ]);
            
            // 2. Assign the 'User' Role
            $user->assignRole('User');

            // 3. Link and Activate Farmer Profile
            $farmer->activate($user);

            // 4. Send Notification (Optional, but recommended)
            // \App\Services\SmsService::sendActivationPin($farmer->phone_primary, $farmer->initial_password);

            DB::commit();

            return back()->with('success', 'Farmer account successfully activated. User account created and credentials notified.');

        } catch (\Exception $e) {
            DB::rollBack();
            // Handle unique constraint violation if email/phone already existed
            if ($e instanceof ValidationException) throw $e;
            return back()->with('error', 'Activation failed: ' . $e->getMessage());
        }
    }
    
}




<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use App\Providers\RouteServiceProvider;
use App\Models\LoginLog;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\Log;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $email = $request->email;
        $ipAddress = $request->ip();
        $userAgent = $request->userAgent();
        
        try {
            // The 'status:onboarded' check has been removed from LoginRequest::authenticate()
            $request->authenticate(); 
            $request->session()->regenerate();
            
            $user = auth()->user();
            
            // Log successful login
            $this->logLoginAttempt($email, $user, $ipAddress, $userAgent, 'success');
            
            // Fetch user's role from Spatie for logging/context
            Log::info('User login attempt:', [
                'user_id' => $user->id,
                'email' => $user->email,
                // Get the name of the first role for logging/context
                'role' => $user->roles->first()->name ?? 'N/A' 
            ]);
            
            // Role-based redirects using Spatie's hasRole() method
            
            // Redirect for Super Admin
            if ($user->hasRole('Super Admin')) {
                return redirect()->route('super_admin.dashboard');
            }

            // Redirect for Governor
            if ($user->hasRole('Governor')) {
                return redirect()->route('governor.dashboard');
            }

            // Redirect for State Admin
            if ($user->hasRole('State Admin')) { 
                return redirect()->route('admin.dashboard');
            }
            
            // Redirect for LGA Admin
            if ($user->hasRole('LGA Admin')) { 
                // Redirecting to a dedicated LGA dashboard route
                return redirect()->route('lga_admin.dashboard'); 
            }

            // Redirect for Enrollment Agent
            if ($user->hasRole('Enrollment Agent')) {
                return redirect()->route('enrollment.dashboard');
            }

            
            // =======================================================
            // Farmer-Specific Login Flow (Standard Users)
            // =======================================================
            if ($user->hasRole('User')) { 
                $farmer = $user->farmerProfile;

                // Check if this is the first login using the 'password_changed' flag
                // This check is CRITICAL for security (forcing a change of the auto-generated PIN)
                if ($farmer && $farmer->password_changed === false) {
                    return redirect()->route('password.force_change');
                }
                
                // If password has been changed or no farmer profile exists (shouldn't happen for a 'User' role)
                return redirect()->intended(RouteServiceProvider::HOME); 
            }
            
            // Default redirect (e.g., if a user has a role not explicitly mapped here)
            return redirect()->intended(RouteServiceProvider::HOME);            
            
        } catch (ValidationException $e) {
            // Log failed login attempt
            $this->logLoginAttempt($email, null, $ipAddress, $userAgent, 'failed', 'Invalid credentials');
            
            throw $e;
        }
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $user = auth()->user();
        
        Auth::guard('web')->logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        // Log logout if user was authenticated
        if ($user) {
            $this->logLoginAttempt($user->email, $user, $request->ip(), $request->userAgent(), 'logout');
        }

        return redirect('/');
    }
    
    /**
     * Log login attempt
     */
    private function logLoginAttempt($email, $user = null, $ipAddress = null, $userAgent = null, $status = 'failed', $failureReason = null)
    {
        try {
            $deviceInfo = LoginLog::getDeviceInfo($userAgent);
            $isSuspicious = LoginLog::isSuspicious($email, $ipAddress, $userAgent);
            
            LoginLog::create([
                'email' => $email,
                'user_id' => $user ? $user->id : null,
                'ip_address' => $ipAddress,
                'user_agent' => $userAgent,
                'device_type' => $deviceInfo['device_type'],
                'browser' => $deviceInfo['browser'],
                'platform' => $deviceInfo['platform'],
                'status' => $status,
                'failure_reason' => $failureReason,
                'is_suspicious' => $isSuspicious,
                'metadata' => [
                    'session_id' => session()->getId(),
                    'timestamp' => now()->toISOString(),
                ],
            ]);
        } catch (\Exception $e) {
            // Log the error but don't break the authentication flow
            \Log::error('Failed to log login attempt: ' . $e->getMessage());
        }
    }
}


<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        // NOTE: The user status check (pending/rejected) has been removed from the
        // login request. Since all users are now set to 'onboarded' by default,
        // and the profile completion step is removed, successful Auth::attempt()
        // is now sufficient for allowing the user to proceed.
        
        RateLimiter::clear($this->throttleKey());
    }

    
    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}


/*
|--------------------------------------------------------------------------
| Enrollment Agent Routes - Submission/Resubmission Workflow
|--------------------------------------------------------------------------
*/
Route::middleware(['auth', 'role:Enrollment Agent'])->prefix('enrollment')->name('enrollment.')->group(function () {
    Route::get('/dashboard', [EnrollmentDashboardController::class, 'index'])->name('dashboard');
    
    // Farmer enrollment routes
    Route::prefix('farmers')->name('farmers.')->group(function () {
        // Index shows ALL submissions (Pending, Rejected, Accepted/Active)
        Route::get('/', [EnrollmentFarmerController::class, 'index'])->name('index'); 
        Route::get('/create', [EnrollmentFarmerController::class, 'create'])->name('create');
        // Submission route
        Route::post('/', [EnrollmentFarmerController::class, 'store'])->name('store');
        
        // Show route to view details and rejection reason
        Route::get('/{farmer}', [EnrollmentFarmerController::class, 'show'])->name('show');
        
        // The EDIT route is now specifically for UPDATING/RESUBMITTING a PENDING/REJECTED farmer
        Route::get('/{farmer}/edit', [EnrollmentFarmerController::class, 'edit'])->name('edit');
        Route::put('/{farmer}', [EnrollmentFarmerController::class, 'update'])->name('update');
        
        // Route to delete a submission (only if pending/rejected)
        Route::delete('/{farmer}', [EnrollmentFarmerController::class, 'destroy'])->name('destroy');
    });
});
