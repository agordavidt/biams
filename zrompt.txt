===Farmers Enrollment Flow
--- migrations

       Schema::create('cooperatives', function (Blueprint $table) {
            $table->id();
            
            // Core Identity & Compliance
            $table->string('registration_number')->unique()->comment('Unique Government/Association ID');
            $table->string('name')->comment('Cooperative Name');
            
            // Contact Details
            $table->string('contact_person')->nullable()->comment('Name of the primary official');
            $table->string('phone')->nullable();
            $table->string('email')->nullable();
            
            // Scale & Activity
            $table->integer('total_member_count')->unsigned()->default(0)->comment('Number of members reported by the cooperative');
            $table->decimal('total_land_size', 15, 2)->nullable()->comment('Aggregate land managed by the cooperative (ha)');
            $table->json('primary_activities')->nullable()->comment('Input procurement, processing, marketing, etc. (Multi-Select)');
            
            // Metadata
            $table->foreignId('lga_id')->nullable()->constrained('lgas')->onDelete('set null')
                  ->comment('Primary LGA for the cooperative');
            $table->foreignId('registered_by')->constrained('users')->onDelete('restrict')
                  ->comment('The Enrollment Agent or Admin who registered the cooperative');

            $table->timestamps();
            $table->softDeletes();
            
            // Indexes
            $table->index('lga_id');
            $table->index('registration_number');
        });
       
        Schema::create('farmers', function (Blueprint $table) {
            $table->id();
            
            // Core Identity & Authentication
            $table->string('nin')->unique()->comment('National Identification Number');
            $table->foreignId('user_id')->nullable()->constrained('users')->onDelete('cascade')
                  ->comment('Links to users table for authentication');
            
            // Personal Demographics
            $table->string('full_name');
            $table->string('phone_primary')->unique();
            $table->string('phone_secondary')->nullable();
            $table->string('email')->unique();
            $table->enum('gender', ['male', 'female', 'other']);
            $table->enum('marital_status', ['single', 'married', 'divorced', 'widowed']);
            $table->date('date_of_birth');
            
            // Location & Administrative Data
            $table->foreignId('lga_id')->constrained('lgas')->onDelete('restrict');
            $table->string('ward');
            $table->text('residential_address');
            
            // Geolocation for Residence
            $table->decimal('residence_latitude', 10, 8)->nullable();
            $table->decimal('residence_longitude', 11, 8)->nullable();
            
            // Socio-Economic Profile
            $table->enum('educational_level', [
                'none', 
                'primary', 
                'secondary', 
                'tertiary', 
                'vocational'
            ]);
            $table->integer('household_size')->unsigned()->default(1);
            $table->enum('primary_occupation', [
                'full_time_farmer',
                'part_time_farmer',
                'civil_servant',
                'trader',
                'artisan',
                'student',
                'other'
            ]);
            $table->string('other_occupation')->nullable();
            
            // Cooperative Linkage
            $table->foreignId('cooperative_id')->nullable()->constrained('cooperatives')->onDelete('set null');
            
            // Enrollment & Administrative Tracking
            $table->foreignId('enrolled_by')->constrained('users')->onDelete('restrict')
                  ->comment('Enrollment Officer who registered this farmer');
            $table->foreignId('approved_by')->nullable()->constrained('users')->onDelete('set null')
                  ->comment('LGA Admin who approved this enrollment');
            
            // Status & Workflow
            $table->enum('status', [
                'pending_lga_review',
                'pending_activation',
                'active',
                'suspended',
                'rejected'
            ])->default('pending_lga_review');
            $table->text('rejection_reason')->nullable();
            $table->timestamp('approved_at')->nullable();
            $table->timestamp('activated_at')->nullable();
            
            // System-Generated Credentials (Cleared after first login)
            $table->string('initial_password')->nullable()
                  ->comment('Temporary storage for initial password - cleared on first login');
            $table->boolean('password_changed')->default(false);
            
            // Metadata
            $table->json('additional_info')->nullable()
                  ->comment('Flexible field for future expansion');
            
            $table->timestamps();
            $table->softDeletes();
            
            // Indexes for Performance
            $table->index(['lga_id', 'status']);
            $table->index('enrolled_by');
            $table->index('approved_by');
            $table->index(['residence_latitude', 'residence_longitude']);
        });
    



        Schema::create('farmers', function (Blueprint $table) {
            $table->id();
            
            // Core Identity & Authentication
            $table->string('nin')->unique()->comment('National Identification Number');
            $table->foreignId('user_id')->nullable()->constrained('users')->onDelete('cascade')
                  ->comment('Links to users table for authentication');
            
            // Personal Demographics
            $table->string('full_name');
            $table->string('phone_primary')->unique();
            $table->string('phone_secondary')->nullable();
            $table->string('email')->unique();
            $table->enum('gender', ['male', 'female', 'other']);
            $table->enum('marital_status', ['single', 'married', 'divorced', 'widowed']);
            $table->date('date_of_birth');
            
            // Location & Administrative Data
            $table->foreignId('lga_id')->constrained('lgas')->onDelete('restrict');
            $table->string('ward');
            $table->text('residential_address');
            
            // Geolocation for Residence
            $table->decimal('residence_latitude', 10, 8)->nullable();
            $table->decimal('residence_longitude', 11, 8)->nullable();
            
            // Socio-Economic Profile
            $table->enum('educational_level', [
                'none', 
                'primary', 
                'secondary', 
                'tertiary', 
                'vocational'
            ]);
            $table->integer('household_size')->unsigned()->default(1);
            $table->enum('primary_occupation', [
                'full_time_farmer',
                'part_time_farmer',
                'civil_servant',
                'trader',
                'artisan',
                'student',
                'other'
            ]);
            $table->string('other_occupation')->nullable();
            
            // Cooperative Linkage
            $table->foreignId('cooperative_id')->nullable()->constrained('cooperatives')->onDelete('set null');
            
            // Enrollment & Administrative Tracking
            $table->foreignId('enrolled_by')->constrained('users')->onDelete('restrict')
                  ->comment('Enrollment Officer who registered this farmer');
            $table->foreignId('approved_by')->nullable()->constrained('users')->onDelete('set null')
                  ->comment('LGA Admin who approved this enrollment');
            
            // Status & Workflow
            $table->enum('status', [
                'pending_lga_review',
                'pending_activation',
                'active',
                'suspended',
                'rejected'
            ])->default('pending_lga_review');
            $table->text('rejection_reason')->nullable();
            $table->timestamp('approved_at')->nullable();
            $table->timestamp('activated_at')->nullable();
            
            // System-Generated Credentials (Cleared after first login)
            $table->string('initial_password')->nullable()
                  ->comment('Temporary storage for initial password - cleared on first login');
            $table->boolean('password_changed')->default(false);
            
            // Metadata
            $table->json('additional_info')->nullable()
                  ->comment('Flexible field for future expansion');
            
            $table->timestamps();
            $table->softDeletes();
            
            // Indexes for Performance
            $table->index(['lga_id', 'status']);
            $table->index('enrolled_by');
            $table->index('approved_by');
            $table->index(['residence_latitude', 'residence_longitude']);
        });
   

           Schema::create('farm_lands', function (Blueprint $table) {
            $table->id(); // Farm ID (Primary Key)
            
            // Linkage
            $table->foreignId('farmer_id')->constrained('farmers')->onDelete('cascade')
                  ->comment('Links the farm back to the Farmer Profile');
            
            // Plot Details
            $table->string('name')->comment('E.g., "Home Plot," "River Field"');
            $table->enum('farm_type', ['crops', 'livestock', 'fisheries', 'orchards', 'forestry'])
                  ->comment('Used to dynamically load the next sub-form');
            $table->decimal('total_size_hectares', 10, 4)
                  ->comment('The registered size of this specific plot (ha)');
            $table->enum('ownership_status', ['owned', 'leased', 'shared', 'communal']);
            
            // Geospatial Data
            // Storing GeoJSON as a TEXT/JSON field for simplicity across various database systems.
            $table->longText('geolocation_geojson')->nullable()
                  ->comment('Actual farm boundaries (polygon) or center point (point) as GeoJSON string');
            
            $table->timestamps();
            $table->softDeletes();
            
            // Indexes
            $table->index('farmer_id');
            $table->index('farm_type');
        });
    }


 Schema::create('crop_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->string('crop_type');
            $table->string('variety')->nullable();
            $table->decimal('expected_yield_kg', 10, 2)->nullable();
            $table->enum('farming_method', ['irrigation', 'rain_fed', 'organic', 'mixed']);
            
            $table->timestamps();
            
            $table->index('crop_type');
        });



        
        Schema::create('livestock_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->string('animal_type');
            $table->integer('herd_flock_size')->unsigned();
            $table->enum('breeding_practice', ['open_grazing', 'ranching', 'intensive', 'semi_intensive']);
            
            $table->timestamps();
            
            $table->index('animal_type');
        });
    }

    Schema::create('fisheries_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->enum('fishing_type', ['aquaculture_pond', 'riverine', 'reservoir']);
            $table->string('species_raised');
            $table->decimal('pond_size_sqm', 10, 2)->nullable();
            $table->decimal('expected_harvest_kg', 10, 2)->nullable();
            
            $table->timestamps();
            
            $table->index('fishing_type');
        });


        Schema::create('orchard_practice_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farm_land_id')->unique()->constrained('farm_lands')->onDelete('cascade');
            
            $table->string('tree_type');
            $table->integer('number_of_trees')->unsigned();
            $table->enum('maturity_stage', ['seedling', 'immature', 'producing']);
            
            $table->timestamps();
            
            $table->index('tree_type');
        });


        Schema::create('cooperative_farmer', function (Blueprint $table) {
            $table->id();
            $table->foreignId('farmer_id')->constrained('farmers')->onDelete('cascade');
            $table->foreignId('cooperative_id')->constrained('cooperatives')->onDelete('cascade');
            $table->string('membership_number')->nullable();
            $table->date('joined_date')->nullable();
            $table->date('exit_date')->nullable();
            $table->enum('membership_status', ['active', 'inactive', 'pending'])->default('active');
            $table->string('position')->nullable();
            $table->text('notes')->nullable();
            $table->timestamps();
            $table->unique(['farmer_id', 'cooperative_id']);
            $table->index('membership_status');
        });

=== -- models
        class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles; //  Use Spatie Trait

    protected $fillable = [
        'name',
        'email',
        'phone_number',
        'password',
        'status',
        'administrative_id',
        'administrative_type',
        // Add all other columns here
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the owning administrative unit (LGA, Department, or Agency).
     */
    public function administrativeUnit()
    {
        // Define the polymorphic relationship for scoping the user
        return $this->morphTo('administrative');
    }
    
   public function scopeForAdministrativeUnit($query, $type, $id)
    {
        return $query->where('administrative_type', $type)
                    ->where('administrative_id', $id);
    }

    public function scopeForLGA($query, $lgaId)
    {
        return $query->forAdministrativeUnit(LGA::class, $lgaId);
    }

    // ==================== Relationships ====================
    // Add a reverse relationship to the Farmer profile.
    public function farmerProfile()
    {
        // A User can only have one Farmer profile associated with it
        return $this->hasOne(Farmer::class, 'user_id');
    }
}

class Farmer extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'nin',
        'user_id',
        'full_name',
        'phone_primary',
        'phone_secondary',
        'email',
        'gender',
        'marital_status',
        'date_of_birth',
        'lga_id',
        'ward',
        'residential_address',
        'residence_latitude',
        'residence_longitude',
        'educational_level',
        'household_size',
        'primary_occupation',
        'other_occupation',
        'cooperative_id',
        'enrolled_by',
        'approved_by',
        'status',
        'rejection_reason',
        'approved_at',
        'activated_at',
        'initial_password',
        'password_changed',
        'additional_info',
    ];

    protected $hidden = [
        'initial_password',
    ];

    protected $casts = [
        'date_of_birth' => 'date',
        'approved_at' => 'datetime',
        'activated_at' => 'datetime',
        'household_size' => 'integer',
        'password_changed' => 'boolean',
        'additional_info' => 'array',
        'residence_latitude' => 'decimal:8',
        'residence_longitude' => 'decimal:8',
    ];

    /**
     * Boot method to handle model events
     */
    protected static function boot()
    {
        parent::boot();

        // Auto-generate initial password when farmer is created
        static::creating(function ($farmer) {
            if (empty($farmer->initial_password)) {
                $farmer->initial_password = Str::random(12); // Secure random password
            }
        });
    }

    // ==================== Relationships ====================

    /**
     * The user account associated with this farmer (after activation)
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * The LGA this farmer belongs to
     */
    public function lga(): BelongsTo
    {
        return $this->belongsTo(LGA::class);
    }

    /**
     * The primary cooperative this farmer belongs to
     */
    public function cooperative(): BelongsTo
    {
        return $this->belongsTo(Cooperative::class);
    }

    /**
     * All cooperatives this farmer is a member of (many-to-many)
     */
    public function cooperatives(): BelongsToMany
    {
        return $this->belongsToMany(Cooperative::class, 'cooperative_farmer')
            ->withPivot([
                'membership_number',
                'joined_date',
                'exit_date',
                'membership_status',
                'position',
                'notes'
            ])
            ->withTimestamps();
    }

    /**
     * The enrollment officer who registered this farmer
     */
    public function enrolledBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'enrolled_by');
    }

    /**
     * The LGA admin who approved this farmer
     */
    public function approvedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    /**
     * All farm lands owned by this farmer
     */
    public function farmLands(): HasMany
    {
        return $this->hasMany(FarmLand::class);
    }

    // ==================== Scopes ====================

    /**
     * Scope for farmers in a specific LGA
     */
    public function scopeForLGA($query, $lgaId)
    {
        return $query->where('lga_id', $lgaId);
    }

    /**
     * Scope for farmers enrolled by a specific officer
     */
    public function scopeEnrolledBy($query, $userId)
    {
        return $query->where('enrolled_by', $userId);
    }

    /**
     * Scope for pending review farmers
     */
    public function scopePendingReview($query)
    {
        return $query->where('status', 'pending_lga_review');
    }

    /**
     * Scope for active farmers
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /**
     * Scope for farmers needing activation
     */
    public function scopePendingActivation($query)
    {
        return $query->where('status', 'pending_activation');
    }

    // ==================== Helper Methods ====================

    /**
     * Get the farmer's age
     */
    public function getAgeAttribute(): int
    {
        return $this->date_of_birth->age ?? 0;
    }

    /**
     * Get full location string
     */
    public function getFullLocationAttribute(): string
    {
        return "{$this->ward}, {$this->lga->name}";
    }

    /**
     * Check if farmer has completed first login
     */
    public function hasChangedPassword(): bool
    {
        return $this->password_changed;
    }

    /**
     * Check if farmer can be activated
     */
    public function canBeActivated(): bool
    {
        return $this->status === 'pending_activation' && !empty($this->initial_password);
    }

    /**
     * Check if farmer is awaiting LGA approval
     */
    public function isPendingApproval(): bool
    {
        return $this->status === 'pending_lga_review';
    }

    /**
     * Approve farmer enrollment
     */
    public function approve(User $admin): bool
    {
        $this->status = 'pending_activation';
        $this->approved_by = $admin->id;
        $this->approved_at = now();
        return $this->save();
    }

    /**
     * Reject farmer enrollment
     */
    public function reject(User $admin, string $reason): bool
    {
        $this->status = 'rejected';
        $this->approved_by = $admin->id;
        $this->rejection_reason = $reason;
        return $this->save();
    }

    /**
     * Activate farmer account
     */
    public function activate(User $user): bool
    {
        $this->user_id = $user->id;
        $this->status = 'active';
        $this->activated_at = now();
        return $this->save();
    }

    /**
     * Clear initial password after first login
     */
    public function clearInitialPassword(): bool
    {
        $this->initial_password = null;
        $this->password_changed = true;
        return $this->save();
    }

    /**
     * Get total farm land size
     */
    public function getTotalFarmSizeAttribute(): float
    {
        return $this->farmLands()->sum('total_size_hectares') ?? 0;
    }

    /**
     * Get count of farms by type
     */
    public function getFarmCountByType(string $type): int
    {
        return $this->farmLands()->where('farm_type', $type)->count();
    }
}

class FarmLand extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'farmer_id',
        'name',
        'farm_type',
        'total_size_hectares',
        'ownership_status',
        'geolocation_geojson',
    ];

    protected $casts = [
        'total_size_hectares' => 'decimal:4',
    ];

    // ==================== Relationships ====================

    public function farmer(): BelongsTo
    {
        return $this->belongsTo(Farmer::class);
    }

    // Dynamic Relationship to Practice Details
    public function practiceDetails(): HasOne
    {
        switch ($this->farm_type) {
            case 'crops':
                return $this->hasOne(CropPracticeDetails::class);
            case 'livestock':
                return $this->hasOne(LivestockPracticeDetails::class);
            case 'fisheries':
                return $this->hasOne(FisheriesPracticeDetails::class);
            case 'orchards':
                return $this->hasOne(OrchardPracticeDetails::class);
            default:
                return $this->hasOne(Model::class); // Fallback
        }
    }
}

class Cooperative extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'registration_number',
        'name',
        'contact_person',
        'phone',
        'email',
        'total_member_count',
        'total_land_size',
        'primary_activities',
        'lga_id',
        'registered_by',
    ];

    protected $casts = [
        'primary_activities' => 'array',
        'total_land_size' => 'decimal:2',
    ];

    // ==================== Relationships ====================

    /**
     * The primary LGA this cooperative is based in.
     */
    public function lga(): BelongsTo
    {
        return $this->belongsTo(LGA::class);
    }

    /**
     * The farmers who have this cooperative set as their primary cooperative (one-to-many).
     */
    public function primaryFarmers(): HasMany
    {
        return $this->hasMany(Farmer::class, 'cooperative_id');
    }

    /**
     * All farmers who are members of this cooperative (many-to-many).
     */
    public function members(): BelongsToMany
    {
        return $this->belongsToMany(Farmer::class, 'cooperative_farmer')
            ->withPivot([
                'membership_number',
                'joined_date',
                'exit_date',
                'membership_status',
                'position',
                'notes'
            ])
            ->withTimestamps();
    }
}

class OrchardPracticeDetails extends Model
{
    use HasFactory;
    
    protected $table = 'orchard_practice_details';

    protected $fillable = [
        'farm_land_id',
        'tree_type',
        'number_of_trees',
        'maturity_stage',
    ];

    protected $casts = [
        'number_of_trees' => 'integer',
    ];

    public function farmLand(): BelongsTo
    {
        return $this->belongsTo(FarmLand::class);
    }
}

class LGA extends Model
{
    protected $table = 'lgas';

    
    use HasFactory;
    protected $fillable = ['name', 'code'];

    /**
     * Get all users scoped to this LGA.
     */
    public function users()
    {
        return $this->morphMany(User::class, 'administrative');
    }
}

class CropPracticeDetails extends Model
{
    use HasFactory;
    
    // Note: No SoftDeletes as this data is deleted when FarmLand is deleted (via migration cascade)
    protected $table = 'crop_practice_details';

    protected $fillable = [
        'farm_land_id',
        'crop_type',
        'variety',
        'expected_yield_kg',
        'farming_method',
    ];

    protected $casts = [
        'expected_yield_kg' => 'decimal:2',
    ];

    public function farmLand(): BelongsTo
    {
        return $this->belongsTo(FarmLand::class);
    }
}


class FisheriesPracticeDetails extends Model
{
    use HasFactory;
    
    protected $table = 'fisheries_practice_details';

    protected $fillable = [
        'farm_land_id',
        'fishing_type',
        'species_raised',
        'pond_size_sqm',
        'expected_harvest_kg',
    ];

    protected $casts = [
        'pond_size_sqm' => 'decimal:2',
        'expected_harvest_kg' => 'decimal:2',
    ];

    public function farmLand(): BelongsTo
    {
        return $this->belongsTo(FarmLand::class);
    }
}

class LivestockPracticeDetails extends Model
{
    use HasFactory;
    
    protected $table = 'livestock_practice_details';

    protected $fillable = [
        'farm_land_id',
        'animal_type',
        'herd_flock_size',
        'breeding_practice',
    ];

    protected $casts = [
        'herd_flock_size' => 'integer',
    ];

    public function farmLand(): BelongsTo
    {
        return $this->belongsTo(FarmLand::class);
    }
}





