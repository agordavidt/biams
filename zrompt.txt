--seeders
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Department;
use App\Models\Agency;

class DepartmentAndAgencySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // 1. Seed Departments
        $dept_agric = Department::firstOrCreate([
            'name' => 'Ministry of Agriculture and Food Security',
            'abbreviation' => 'MAFS',
        ]);
        
        $dept_dev = Department::firstOrCreate([
            'name' => 'Agricultural Development and Empowerment Programmes',
            'abbreviation' => 'ADEP',
        ]);

        $dept_water = Department::firstOrCreate([
            'name' => 'Ministry of Water Resources and Environment',
            'abbreviation' => 'MWRE',
        ]);
        
        $dept_land = Department::firstOrCreate([
            'name' => 'Ministry of Lands and Survey',
            'abbreviation' => 'MLS',
        ]);


        // 2. Seed Agencies linked to Departments
        
        // Agencies under MAFS
        Agency::firstOrCreate([
            'name' => 'Mechanised Farming Pilot Scheme',
            'department_id' => $dept_agric->id
        ]);

        Agency::firstOrCreate([
            'name' => 'Benue State Agricultural and Rural Development Authority (BNARDA)',
            'department_id' => $dept_agric->id
        ]);
        
        // Agencies under ADEP
        Agency::firstOrCreate([
            'name' => 'Benue State Agricultural Development Corporation (BSADC)',
            'department_id' => $dept_dev->id
        ]);

        Agency::firstOrCreate([
            'name' => 'Agricultural Resource Management Agency',
            'department_id' => $dept_dev->id
        ]);
        
        // Agencies under MWRE (Example)
        Agency::firstOrCreate([
            'name' => 'Water and Soil Conservation Unit',
            'department_id' => $dept_water->id
        ]);


        $this->command->info('✅ Departments and Agencies seeded successfully!');
    }
}


<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\LGA;

class LgaSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $lgas = [
            // List of the 23 LGAs in Benue State (with illustrative codes)
           
            ['name' => 'Makurdi', 'code' => 'MDK'],
            ['name' => 'Gboko', 'code' => 'GBK'],
            ['name' => 'Gwer East', 'code' => 'GWE'],
            ['name' => 'Gwer West', 'code' => 'GWW'],
            ['name' => 'Vandeikya', 'code' => 'VND'],
            ['name' => 'Konshisha', 'code' => 'KNS'],
            ['name' => 'Buruku', 'code' => 'BRK'],
            ['name' => 'Ushongo', 'code' => 'USG'],
            ['name' => 'Logo', 'code' => 'LGO'],
            ['name' => 'Ukum', 'code' => 'UKM'],
            ['name' => 'Katsina-Ala', 'code' => 'KTA'],
            ['name' => 'Kwande', 'code' => 'KWD'],
            ['name' => 'Tarka', 'code' => 'TRK'],
            ['name' => 'Guma', 'code' => 'GUM'],            
            ['name' => 'Otukpo', 'code' => 'OTK'],
            ['name' => 'Okpokwu', 'code' => 'OPK'],
            ['name' => 'Ohimini', 'code' => 'OHM'],
            ['name' => 'Ogbadibo', 'code' => 'OGB'],
            ['name' => 'Agatu', 'code' => 'AGT'],
            ['name' => 'Apa', 'code' => 'APA'],
            ['name' => 'Oju', 'code' => 'OJU'],
            ['name' => 'Obi', 'code' => 'OBI'],
            ['name' => 'Ado', 'code' => 'ADO'],
        ];

        foreach ($lgas as $lga) {
            LGA::firstOrCreate(['name' => $lga['name']], $lga);
        }

        $this->command->info('Benue State LGAs seeded successfully!');
    }
}


<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\LGA;
use App\Models\Department;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RolesAndPermissionsSeeder extends Seeder
{
    public function run(): void
    {
        // Forget cached roles and permissions
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        // 1. Retrieve Administrative Units (These should have been seeded by LgaSeeder and DepartmentAndAgencySeeder)

        // Retrieve Makurdi LGA for test users
        $lga = LGA::where('code', 'MDK')->first();
        if (!$lga) {
            $this->command->error("Makurdi LGA not found. Run LgaSeeder first.");
            return;
        }

        // Retrieve Ministry of Agriculture for State Admin test user
        $dept_agric = Department::where('abbreviation', 'MAFS')->first();
        if (!$dept_agric) {
            $this->command->error("Ministry of Agriculture (MAFS) not found. Run DepartmentAndAgencySeeder first.");
            return;
        }


        // 2. Define Permissions (Same as before)
        $permissions = [
            // Super Admin Permissions
            'manage_users', 'manage_roles', 'manage_lgas', 'manage_departments',
            'manage_agencies', 'system_settings', 'view_audit_logs', 'export_all_data',

            // Governor/State-level Permissions
            'view_governor_dashboard', 'view_state_analytics', 'manage_state_reports', 'manage_supplier_catalog',

            // LGA-level Permissions
            'create_farmer_profile', 'edit_farmer_profile_own_lga', 'view_farmer_data_own_lga', 'manage_lga_manifests',

            // Standard User Permissions
            'access_marketplace', 'apply_for_resource', 'view_own_submissions', 'manage_own_marketplace_listings',
        ];

        foreach ($permissions as $permission) {
            Permission::firstOrCreate(['name' => $permission, 'guard_name' => 'web']);
        }

        // 3. Define Roles
        $superAdminRole = Role::firstOrCreate(['name' => 'Super Admin', 'guard_name' => 'web']);
        $governorRole   = Role::firstOrCreate(['name' => 'Governor', 'guard_name' => 'web']);
        $stateAdminRole = Role::firstOrCreate(['name' => 'State Admin', 'guard_name' => 'web']);
        $lgaAdminRole   = Role::firstOrCreate(['name' => 'LGA Admin', 'guard_name' => 'web']);
        $userRole       = Role::firstOrCreate(['name' => 'User', 'guard_name' => 'web']);

        // 4. Assign Permissions to Roles
        $superAdminRole->syncPermissions($permissions);
        $governorRole->syncPermissions([
            'view_governor_dashboard', 'view_state_analytics', 'manage_state_reports', 'export_all_data',
        ]);
        $stateAdminRole->syncPermissions([
            'manage_users', 'manage_roles', 'manage_departments', 'manage_agencies',
            'manage_state_reports', 'manage_supplier_catalog', 'view_state_analytics',
        ]);
        $lgaAdminRole->syncPermissions([
            'create_farmer_profile', 'edit_farmer_profile_own_lga', 'view_farmer_data_own_lga', 'manage_lga_manifests',
        ]);
        $userRole->syncPermissions([
            'access_marketplace', 'apply_for_resource', 'view_own_submissions', 'manage_own_marketplace_listings',
        ]);

        // 5. Create Initial Users (Now relies on the retrieved variables $lga and $dept_agric)

        // Super Admin (State-wide/System-level)
        User::firstOrCreate(['email' => 'superadmin@benue.gov.ng'], [
            'name' => 'System Super Administrator',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
        ])->syncRoles([$superAdminRole]);

        // Governor
        User::firstOrCreate(['email' => 'governor@benue.gov.ng'], [
            'name' => 'Executive Governor',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
        ])->syncRoles([$governorRole]);

        // State Admin (Assigned to Ministry of Agriculture)
        User::firstOrCreate(['email' => 'stateadmin@benue.gov.ng'], [
            'name' => 'State Administrator (Agric)',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $dept_agric->id,
            'administrative_type' => Department::class,
        ])->syncRoles([$stateAdminRole]);

        // LGA Admin (Assigned to Makurdi LGA)
        User::firstOrCreate(['email' => 'lgaadmin@makurdi.gov.ng'], [
            'name' => 'Makurdi LGA Administrator',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id,
            'administrative_type' => LGA::class,
        ])->syncRoles([$lgaAdminRole]);

        // Standard User (Farmer)
        User::firstOrCreate(['email' => 'farmer@test.com'], [
            'name' => 'Test Farmer User',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id, // Assigned to Makurdi LGA
            'administrative_type' => LGA::class,
        ])->syncRoles([$userRole]);

        $this->command->info('✅ Roles, permissions, and initial test users seeded successfully!');
    }
}




--- migrations

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('lgas', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('code')->unique()->comment('Internal LGA code or abbreviation');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('lgas');
    }
};



<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('abbreviation')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('departments');
    }
};



<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('agencies', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->foreignId('department_id')->nullable()->constrained()->onDelete('set null');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('agencies');
    }
};



<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('phone_number')->nullable()->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');

            // Administrative Scope (Polymorphic Relationship)
            // Links a user to their LGA, Department, or Agency.
            $table->nullableMorphs('administrative'); // Creates administrative_id and administrative_type

            $table->enum('status', ['pending', 'onboarded', 'rejected'])->default('pending')->comment('User onboarding workflow status');
            $table->text('rejection_reason')->nullable();
            
            $table->rememberToken();
            $table->timestamps();

            // Index for faster lookups based on scope
            $table->index(['administrative_id', 'administrative_type']);
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};





===========
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use App\Providers\RouteServiceProvider;
use App\Models\LoginLog;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\Log;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $email = $request->email;
        $ipAddress = $request->ip();
        $userAgent = $request->userAgent();
        
        try {
            // NOTE: The 'status:onboarded' check is now inside LoginRequest::authenticate()
            $request->authenticate(); 
            $request->session()->regenerate();
            
            $user = auth()->user();
            
            // Log successful login
            $this->logLoginAttempt($email, $user, $ipAddress, $userAgent, 'success');
            
            // 💡 UPDATED: Fetch user's role from Spatie for logging (if available)
            Log::info('User login attempt:', [
                'user_id' => $user->id,
                'email' => $user->email,
                // Get the name of the first role for logging/context
                'role' => $user->roles->first()->name ?? 'N/A' 
            ]);
            
            // 💡 UPDATED: Role-based redirects using Spatie's hasRole() method
            
            // Redirect for Super Admin
            if ($user->hasRole('Super Admin')) {
                return redirect()->route('super_admin.dashboard');
            }

            // Redirect for Governor
            if ($user->hasRole('Governor')) {
                return redirect()->route('governor.dashboard');
            }

            // Redirect for State Admin (formerly 'admin')
            if ($user->hasRole('State Admin')) { 
                return redirect()->route('admin.dashboard');
            }
            
            // Redirect for LGA Admin (Example of a new role)
            if ($user->hasRole('LGA Admin')) { 
                return redirect()->route('admin.dashboard'); // Assuming same dashboard route as State Admin
            }

            // For regular users (check if they have the 'User' role)
            if ($user->hasRole('User')) { 
                if (!$user->profile) {
                    return redirect()->route('profile.complete')->with('info', 'Please complete your profile to continue.');
                }
                
                // User has completed profile, redirect to home
                return redirect()->intended(RouteServiceProvider::HOME);
            }
            
            // Default redirect (e.g., if a user has a role not explicitly mapped here, or no role but is authenticated)
            return redirect()->intended(RouteServiceProvider::HOME);
            
        } catch (ValidationException $e) {
            // Log failed login attempt
            $this->logLoginAttempt($email, null, $ipAddress, $userAgent, 'failed', 'Invalid credentials');
            
            throw $e;
        }
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        // ... (unchanged)
        $user = auth()->user();
        
        Auth::guard('web')->logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        // Log logout if user was authenticated
        if ($user) {
            $this->logLoginAttempt($user->email, $user, $request->ip(), $request->userAgent(), 'logout');
        }

        return redirect('/');
    }

    // ... rest of the class (logLoginAttempt method is unchanged)
    
    /**
     * Log login attempt
     */
    private function logLoginAttempt($email, $user = null, $ipAddress = null, $userAgent = null, $status = 'failed', $failureReason = null)
    {
        try {
            $deviceInfo = LoginLog::getDeviceInfo($userAgent);
            $isSuspicious = LoginLog::isSuspicious($email, $ipAddress, $userAgent);
            
            LoginLog::create([
                'email' => $email,
                'user_id' => $user ? $user->id : null,
                'ip_address' => $ipAddress,
                'user_agent' => $userAgent,
                'device_type' => $deviceInfo['device_type'],
                'browser' => $deviceInfo['browser'],
                'platform' => $deviceInfo['platform'],
                'status' => $status,
                'failure_reason' => $failureReason,
                'is_suspicious' => $isSuspicious,
                'metadata' => [
                    'session_id' => session()->getId(),
                    'timestamp' => now()->toISOString(),
                ],
            ]);
        } catch (\Exception $e) {
            // Log the error but don't break the authentication flow
            \Log::error('Failed to log login attempt: ' . $e->getMessage());
        }
    }
}


Routes
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\SuperAdmin\DashboardController as SuperAdminDashboardController;
use App\Http\Controllers\SuperAdmin\ManagementController;
use App\Http\Controllers\Governor\DashboardController as GovernorDashboardController;
use App\Http\Controllers\Admin\DashboardController as StateAdminDashboardController;
use App\Http\Controllers\LGAAdmin\DashboardController as LGAAdminDashboardController;
use App\Http\Controllers\User\DashboardController as UserDashboardController;

use Illuminate\Support\Facades\Route;
use App\Providers\RouteServiceProvider;

/*
|--------------------------------------------------------------------------
| Public Routes
|--------------------------------------------------------------------------
*/
Route::get('/', function () {
    return view('welcome');
});

require __DIR__.'/auth.php';

/*
|--------------------------------------------------------------------------
| Authenticated User Routes (Base Level)
|--------------------------------------------------------------------------
*/
Route::middleware(['auth', 'onboarded'])->group(function () {
    Route::get(RouteServiceProvider::HOME, [UserDashboardController::class, 'index'])->name('home');
    Route::get('/marketplace', function() {
        return view('user.marketplace');
    })->name('marketplace')->middleware('role:User');
});

/*
|--------------------------------------------------------------------------
| Role-Gated Admin Routes (using Spatie Role Middleware)
|--------------------------------------------------------------------------
*/

// Super Admin Routes
Route::middleware(['auth', 'role:Super Admin'])->prefix('super-admin')->name('super_admin.')->group(function () {
    
    // Dashboard
    Route::get('/dashboard', [SuperAdminDashboardController::class, 'index'])->name('dashboard');

    // Management Routes
    Route::prefix('management')->name('management.')->group(function () {
        // Management Index
        Route::get('/', [ManagementController::class, 'index'])->name('index');
        
        // User Management Routes
        Route::prefix('users')->name('users.')->group(function () {
            Route::get('/', [ManagementController::class, 'users'])->name('index');
            Route::get('/create', [ManagementController::class, 'createUser'])->name('create');
            Route::post('/', [ManagementController::class, 'storeUser'])->name('store');
            Route::get('/{user}/edit', [ManagementController::class, 'editUser'])->name('edit');
            Route::put('/{user}', [ManagementController::class, 'updateUser'])->name('update');
            Route::delete('/{user}', [ManagementController::class, 'destroyUser'])->name('destroy');
        });

        // Department Management Routes
        Route::prefix('departments')->name('departments.')->group(function () {
            Route::get('/', [ManagementController::class, 'departments'])->name('index');
            Route::post('/', [ManagementController::class, 'storeDepartment'])->name('store');
            Route::put('/{department}', [ManagementController::class, 'updateDepartment'])->name('update');
            Route::delete('/{department}', [ManagementController::class, 'destroyDepartment'])->name('destroy');
        });

        // Agency Management Routes
        Route::prefix('agencies')->name('agencies.')->group(function () {
            Route::get('/', [ManagementController::class, 'agencies'])->name('index');
            Route::post('/', [ManagementController::class, 'storeAgency'])->name('store');
            Route::put('/{agency}', [ManagementController::class, 'updateAgency'])->name('update');
            Route::delete('/{agency}', [ManagementController::class, 'destroyAgency'])->name('destroy');
        });

        // LGA Management Routes
        Route::prefix('lgas')->name('lgas.')->group(function () {
            Route::get('/', [ManagementController::class, 'lgas'])->name('index');
        });
    });
});

// Governor Routes
Route::middleware(['auth', 'role:Governor'])->prefix('governor')->group(function () {
    Route::get('/dashboard', [GovernorDashboardController::class, 'index'])->name('governor.dashboard');
});

// State Admin Routes
Route::middleware(['auth', 'role:State Admin'])->prefix('admin')->group(function () {
    Route::get('/dashboard', [StateAdminDashboardController::class, 'index'])->name('admin.dashboard');
});

// LGA Admin Routes
Route::middleware(['auth', 'role:LGA Admin'])->prefix('lga-admin')->group(function () {
    Route::get('/dashboard', [LGAAdminDashboardController::class, 'index'])->name('lga_admin.dashboard');
});


