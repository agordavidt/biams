-- models
class LGA extends Model
{
    protected $table = 'lgas';

    
    use HasFactory;
    protected $fillable = ['name', 'code'];

    /**
     * Get all users scoped to this LGA.
     */
    public function users()
    {
        return $this->morphMany(User::class, 'administrative');
    }
}




class Department extends Model
{
    protected $table = 'departments';

    use HasFactory;
    protected $fillable = ['name', 'abbreviation'];

    /**
     * Get all users scoped to this Department.
     */
    public function users()
    {
        return $this->morphMany(User::class, 'administrative');
    }

    public function agencies()
    {
        return $this->hasMany(Agency::class);
    }
}


class Agency extends Model
{

    protected $table = 'agencies';


    use HasFactory;
    protected $fillable = ['name', 'department_id'];

    /**
     * Get all users scoped to this Agency.
     */
    public function users()
    {
        return $this->morphMany(User::class, 'administrative');
    }
    
    public function department()
    {
        return $this->belongsTo(Department::class);
    }
}

lass User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles; //  Use Spatie Trait

    protected $fillable = [
        'name',
        'email',
        'phone_number',
        'password',
        'status',
        'administrative_id',
        'administrative_type',
        // Add all other columns here
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the owning administrative unit (LGA, Department, or Agency).
     */
    public function administrativeUnit()
    {
        // Define the polymorphic relationship for scoping the user
        return $this->morphTo('administrative');
    }
    
   public function scopeForAdministrativeUnit($query, $type, $id)
    {
        return $query->where('administrative_type', $type)
                    ->where('administrative_id', $id);
    }

    public function scopeForLGA($query, $lgaId)
    {
        return $query->forAdministrativeUnit(LGA::class, $lgaId);
    }

    // ==================== Relationships ====================
    // Add a reverse relationship to the Farmer profile.
    public function farmerProfile()
    {
        // A User can only have one Farmer profile associated with it
        return $this->hasOne(Farmer::class, 'user_id');
    }
}


-- migrations and seeders
 public function up(): void
    {
        Schema::create('lgas', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('code')->unique()->comment('Internal LGA code or abbreviation');
            $table->timestamps();
        });
    }



    Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('abbreviation')->nullable();
            $table->timestamps();
        });



         Schema::create('agencies', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->foreignId('department_id')->nullable()->constrained()->onDelete('set null');
            $table->timestamps();
        });

        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('phone_number')->nullable()->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');

            // Administrative Scope (Polymorphic Relationship)
            // Links a user to their LGA, Department, or Agency.
            $table->nullableMorphs('administrative'); // Creates administrative_id and administrative_type

            $table->enum('status', ['pending', 'onboarded', 'rejected'])->default('onboarded')->comment('User onboarding workflow status');            
            $table->rememberToken();
            $table->timestamps();

            // Index for faster lookups based on scope
            $table->index(['administrative_id', 'administrative_type']);
        });




        class RolesAndPermissionsSeeder extends Seeder
{
    public function run(): void
    {
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        $lga = LGA::where('code', 'MDK')->first();
        if (!$lga) {
            $this->command->error("Makurdi LGA not found. Run LgaSeeder first.");
            return;
        }

        $dept_agric = Department::where('abbreviation', 'MAFS')->first();
        if (!$dept_agric) {
            $this->command->error("Ministry of Agriculture (MAFS) not found. Run DepartmentAndAgencySeeder first.");
            return;
        }

        // Define Permissions
        $permissions = [
            // Super Admin Permissions
            'manage_users', 'manage_roles', 'manage_lgas', 'manage_departments',
            'manage_agencies', 'system_settings', 'view_audit_logs', 'export_all_data',

            // Governor/State-level Permissions
            'view_governor_dashboard', 'view_state_analytics', 'manage_state_reports', 'manage_supplier_catalog',

            // LGA Admin Permissions
            'view_lga_dashboard', 'manage_lga_agents', // Added manage_lga_agents

            // LGA-level Permissions
            'create_farmer_profile', 'edit_farmer_profile_own_lga', 'view_farmer_data_own_lga', 'manage_lga_manifests',

            // Enrollment Agent Permissions
            'enroll_farmers', 'verify_farmer_data', 'update_farmer_profiles',

            // Standard User Permissions
            'access_marketplace', 'apply_for_resource', 'view_own_submissions', 'manage_own_marketplace_listings',
        ];

        foreach ($permissions as $permission) {
            Permission::firstOrCreate(['name' => $permission, 'guard_name' => 'web']);
        }

        // Define Roles
        $superAdminRole = Role::firstOrCreate(['name' => 'Super Admin', 'guard_name' => 'web']);
        $governorRole   = Role::firstOrCreate(['name' => 'Governor', 'guard_name' => 'web']);
        $stateAdminRole = Role::firstOrCreate(['name' => 'State Admin', 'guard_name' => 'web']);
        $lgaAdminRole   = Role::firstOrCreate(['name' => 'LGA Admin', 'guard_name' => 'web']);
        $enrollmentAgentRole = Role::firstOrCreate(['name' => 'Enrollment Agent', 'guard_name' => 'web']); // Added
        $userRole       = Role::firstOrCreate(['name' => 'User', 'guard_name' => 'web']);

        // Assign Permissions to Roles
        $superAdminRole->syncPermissions($permissions);
        
        $governorRole->syncPermissions([
            'view_governor_dashboard', 'view_state_analytics', 'manage_state_reports', 'export_all_data',
        ]);
        
        $stateAdminRole->syncPermissions([
            'manage_users', 'manage_roles', 'manage_departments', 'manage_agencies',
            'manage_state_reports', 'manage_supplier_catalog', 'view_state_analytics',
        ]);
        
        $lgaAdminRole->syncPermissions([
            'view_lga_dashboard', 'manage_lga_agents', 'create_farmer_profile', 
            'edit_farmer_profile_own_lga', 'view_farmer_data_own_lga', 'manage_lga_manifests',
        ]);

        $enrollmentAgentRole->syncPermissions([
            'enroll_farmers', 'verify_farmer_data', 'update_farmer_profiles', 'view_farmer_data_own_lga',
        ]);
        
        $userRole->syncPermissions([
            'access_marketplace', 'apply_for_resource', 'view_own_submissions', 'manage_own_marketplace_listings',
        ]);

        // Create Initial Users
        User::firstOrCreate(['email' => 'superadmin@benue.gov.ng'], [
            'name' => 'System Super Administrator',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
        ])->syncRoles([$superAdminRole]);

        User::firstOrCreate(['email' => 'governor@benue.gov.ng'], [
            'name' => 'Executive Governor',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
        ])->syncRoles([$governorRole]);

        User::firstOrCreate(['email' => 'stateadmin@benue.gov.ng'], [
            'name' => 'State Administrator (Agric)',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $dept_agric->id,
            'administrative_type' => Department::class,
        ])->syncRoles([$stateAdminRole]);

        User::firstOrCreate(['email' => 'lgaadmin@makurdi.gov.ng'], [
            'name' => 'Makurdi LGA Administrator',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id,
            'administrative_type' => LGA::class,
        ])->syncRoles([$lgaAdminRole]);

        User::firstOrCreate(['email' => 'agent@makurdi.gov.ng'], [
            'name' => 'Test Enrollment Agent',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id,
            'administrative_type' => LGA::class,
        ])->syncRoles([$enrollmentAgentRole]);

        User::firstOrCreate(['email' => 'farmer@test.com'], [
            'name' => 'Test Farmer User',
            'password' => Hash::make('password'),
            'email_verified_at' => now(),
            'status' => 'onboarded',
            'administrative_id' => $lga->id,
            'administrative_type' => LGA::class,
        ])->syncRoles([$userRole]);

        $this->command->info('â Roles, permissions, and initial test users seeded successfully!');
    }
}

 public function run(): void
    {
        // 1. Seed Departments
        $dept_agric = Department::firstOrCreate([
            'name' => 'Ministry of Agriculture and Food Security',
            'abbreviation' => 'MAFS',
        ]);
        
        $dept_dev = Department::firstOrCreate([
            'name' => 'Agricultural Development and Empowerment Programmes',
            'abbreviation' => 'ADEP',
        ]);

        $dept_water = Department::firstOrCreate([
            'name' => 'Ministry of Water Resources and Environment',
            'abbreviation' => 'MWRE',
        ]);
        
        $dept_land = Department::firstOrCreate([
            'name' => 'Ministry of Lands and Survey',
            'abbreviation' => 'MLS',
        ]);


        // 2. Seed Agencies linked to Departments
        
        // Agencies under MAFS
        Agency::firstOrCreate([
            'name' => 'Mechanised Farming Pilot Scheme',
            'department_id' => $dept_agric->id
        ]);

        Agency::firstOrCreate([
            'name' => 'Benue State Agricultural and Rural Development Authority (BNARDA)',
            'department_id' => $dept_agric->id
        ]);
        
        // Agencies under ADEP
        Agency::firstOrCreate([
            'name' => 'Benue State Agricultural Development Corporation (BSADC)',
            'department_id' => $dept_dev->id
        ]);

        Agency::firstOrCreate([
            'name' => 'Agricultural Resource Management Agency',
            'department_id' => $dept_dev->id
        ]);
        
        // Agencies under MWRE (Example)
        Agency::firstOrCreate([
            'name' => 'Water and Soil Conservation Unit',
            'department_id' => $dept_water->id
        ]);


        $this->command->info('â Departments and Agencies seeded successfully!');
    }
}











